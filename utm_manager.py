# utm_manager.py
"""
–ú–µ–Ω–µ–¥–∂–µ—Ä UTM –º–µ—Ç–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π - —Ä–∞–±–æ—Ç–∞ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∏ –ø–∞–º—è—Ç—å—é
"""
from database import db

# –ö–µ—à UTM –º–µ—Ç–æ–∫ –≤ –ø–∞–º—è—Ç–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
utm_cache = {}

# –ö–µ—à –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –≤–∏–¥–µ–æ
video_sent_cache = {}

def parse_utm_from_start(start_param: str) -> dict:
    """
    –ü–∞—Ä—Å–∏—Ç UTM –º–µ—Ç–∫–∏ –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ /start
    
    –ü—Ä–∏–º–µ—Ä –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:
    "welcome2025_utm_source-ig_utm_medium-stories_utm_campaign-avatarai"
    
    Args:
        start_param: –ø–∞—Ä–∞–º–µ—Ç—Ä –∏–∑ –∫–æ–º–∞–Ω–¥—ã /start
        
    Returns:
        dict: UTM –º–µ—Ç–∫–∏ {"utm_source": "ig", "utm_medium": "stories", "utm_campaign": "avatarai"}
    """
    if not start_param:
        print("‚ùå –ü—É—Å—Ç–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä start")
        return {}
    
    if not start_param.startswith("welcome2025"):
        print(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ start: {start_param}")
        return {}
    
    try:
        # –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å "welcome2025_"
        utm_string = start_param.replace("welcome2025_", "")
        print(f"üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º UTM —Å—Ç—Ä–æ–∫—É: {utm_string}")
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ —Å–∏–º–≤–æ–ª—É "_"
        utm_parts = utm_string.split("_")
        print(f"üîç UTM —á–∞—Å—Ç–∏: {utm_parts}")
        
        utm_data = {}
        
        for part in utm_parts:
            if "-" in part:
                # –†–∞–∑–±–∏–≤–∞–µ–º "utm_source-ig" –Ω–∞ ["utm_source", "ig"]
                key, value = part.split("-", 1)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å "utm_" –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
                if not key.startswith("utm_"):
                    key = f"utm_{key}"
                
                utm_data[key] = value
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ UTM –º–µ—Ç–∫–∞: {key} = {value}")
        
        print(f"üìã –ò—Ç–æ–≥–æ UTM –º–µ—Ç–æ–∫: {utm_data}")
        return utm_data
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ UTM –∏–∑ '{start_param}': {e}")
        return {}

def save_utm_to_cache_and_db(user_id: int, utm_data: dict):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç UTM –º–µ—Ç–∫–∏ –≤ –∫–µ—à –∏ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    
    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        utm_data: UTM –º–µ—Ç–∫–∏
    """
    if not utm_data:
        print(f"‚ö†Ô∏è –ü—É—Å—Ç—ã–µ UTM –º–µ—Ç–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–µ—à
    utm_cache[user_id] = utm_data
    print(f"üíæ UTM –º–µ—Ç–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –∫–µ—à –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    try:
        db.save_user_utm(user_id, utm_data)
        print(f"üíæ UTM –º–µ—Ç–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ë–î –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {utm_data}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è UTM –≤ –ë–î –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")

def get_utm_from_cache_or_db(user_id: int) -> dict:
    """
    –ü–æ–ª—É—á–∞–µ—Ç UTM –º–µ—Ç–∫–∏ –∏–∑ –∫–µ—à–∞ –∏–ª–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    
    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
    Returns:
        dict: UTM –º–µ—Ç–∫–∏ –∏–ª–∏ –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å
    """
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤ –∫–µ—à–µ
    if user_id in utm_cache:
        print(f"‚ö° UTM –º–µ—Ç–∫–∏ –≤–∑—è—Ç—ã –∏–∑ –∫–µ—à–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        return utm_cache[user_id]
    
    # –ï—Å–ª–∏ –≤ –∫–µ—à–µ –Ω–µ—Ç, –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ –ë–î
    try:
        utm_data = db.get_user_utm(user_id)
        if utm_data:
            # –ö–µ—à–∏—Ä—É–µ–º –¥–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö –æ–±—Ä–∞—â–µ–Ω–∏–π
            utm_cache[user_id] = utm_data
            print(f"üìÇ UTM –º–µ—Ç–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ –ë–î –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {utm_data}")
            return utm_data
        else:
            print(f"‚ùå UTM –º–µ—Ç–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            return {}
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ UTM –∏–∑ –ë–î –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        return {}

def build_utm_url_params(utm_data: dict) -> str:
    """
    –°—Ç—Ä–æ–∏—Ç —Å—Ç—Ä–æ–∫—É UTM –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è URL
    
    Args:
        utm_data: UTM –º–µ—Ç–∫–∏
        
    Returns:
        str: —Å—Ç—Ä–æ–∫–∞ –¥–ª—è URL "utm_source=ig&utm_medium=stories&utm_campaign=avatarai"
    """
    if not utm_data:
        # –î–µ—Ñ–æ–ª—Ç–Ω—ã–µ UTM –º–µ—Ç–∫–∏ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –Ω–µ—Ç
        default_params = "utm_source=telegram_bot&utm_medium=button&utm_campaign=avatarai"
        print(f"‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ UTM: {default_params}")
        return default_params
    
    utm_params = []
    for key, value in utm_data.items():
        if key and value:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–ª—é—á –∏ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –ø—É—Å—Ç—ã–µ
            utm_params.append(f"{key}={value}")
    
    utm_string = "&".join(utm_params)
    print(f"üîó –ü–æ—Å—Ç—Ä–æ–µ–Ω–∞ UTM —Å—Ç—Ä–æ–∫–∞: {utm_string}")
    return utm_string

def get_utm_url_params_for_user(user_id: int) -> str:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –≥–æ—Ç–æ–≤—É—é —Å—Ç—Ä–æ–∫—É UTM –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
    Returns:
        str: UTM –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è URL
    """
    print(f"üîç –ü–æ–ª—É—á–∞–µ–º UTM –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    utm_data = get_utm_from_cache_or_db(user_id)
    return build_utm_url_params(utm_data)

# ===== –§–£–ù–ö–¶–ò–ò –î–õ–Ø –í–ò–î–ï–û =====

def is_video_already_sent(user_id: int) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –±—ã–ª–æ –ª–∏ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤–∏–¥–µ–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    
    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
    Returns:
        bool: True –µ—Å–ª–∏ –≤–∏–¥–µ–æ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–æ—Å—å
    """
    return video_sent_cache.get(user_id, False)

def mark_video_as_sent(user_id: int):
    """
    –û—Ç–º–µ—á–∞–µ—Ç, —á—Ç–æ –≤–∏–¥–µ–æ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    
    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    video_sent_cache[user_id] = True
    print(f"üìπ –í–∏–¥–µ–æ –æ—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

# ===== –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ò–ú–ü–û–†–¢–ê =====

def parse_and_save_utm(user_id: int, start_param: str):
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: –ø–∞—Ä—Å–∏—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç UTM –º–µ—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        start_param: –ø–∞—Ä–∞–º–µ—Ç—Ä –∏–∑ /start
    """
    print(f"üéØ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º UTM –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, –ø–∞—Ä–∞–º–µ—Ç—Ä: {start_param}")
    
    utm_data = parse_utm_from_start(start_param)
    if utm_data:
        save_utm_to_cache_and_db(user_id, utm_data)
    else:
        print(f"‚ö†Ô∏è UTM –º–µ—Ç–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

def get_payment_url_with_utm(user_id: int, base_url: str, payment_id: str) -> str:
    """
    –°—Ç—Ä–æ–∏—Ç –ø–æ–ª–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É —Å UTM –º–µ—Ç–∫–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        base_url: –±–∞–∑–æ–≤–∞—è —Å—Å—ã–ª–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: "https://solotatiana.getcourse.ru/avatarself")
        payment_id: ID –ø–ª–∞—Ç–µ–∂–∞
        
    Returns:
        str: –ø–æ–ª–Ω–∞—è —Å—Å—ã–ª–∫–∞ —Å UTM –º–µ—Ç–∫–∞–º–∏
    """
    utm_params = get_utm_url_params_for_user(user_id)
    full_url = f"{base_url}?id={payment_id}&{utm_params}"
    print(f"üîó –ü–æ—Å—Ç—Ä–æ–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {full_url}")
    return full_url