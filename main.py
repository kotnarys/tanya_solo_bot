import asyncio
import logging
import os
from pathlib import Path
from aiogram import Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
import threading
from flask import Flask, request, jsonify
import requests
from datetime import datetime
from collections import defaultdict
import time

from core.config import BOT_TOKEN, ADMIN_IDS
from handlers import start, info, tariffs, support, payment, subscription, ai_chat, referral, news
from background.auto_spam import start_auto_spam_task
from core.database import init_db, db
from background.kupi_video import kupi_video_background_task
from background.daily_thread_reset import daily_thread_reset_task

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è - —Ç–æ–ª—å–∫–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏
logging.basicConfig(
    level=logging.CRITICAL,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

# –û—Ç–∫–ª—é—á–∞–µ–º –ª–∏—à–Ω–∏–µ –ª–æ–≥–∏
logging.getLogger('handlers.ai_chat').setLevel(logging.CRITICAL)
logging.getLogger('core.openai_client').setLevel(logging.CRITICAL)
logging.getLogger('background.kupi_video').setLevel(logging.CRITICAL)
logging.getLogger('background.auto_spam').setLevel(logging.CRITICAL)
logger = logging.getLogger(__name__)

# =================== WEBHOOK SERVER ===================

# –ü–æ–¥–∞–≤–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ª–æ–≥–∏ –æ—Ç werkzeug (Flask)
class NoBotsLogFilter(logging.Filter):
    def filter(self, record):
        if hasattr(record, 'getMessage'):
            message = record.getMessage()
            if '404' in message and any(path in message for path in 
                ['GET /', 'GET /favicon.ico', 'GET /login', 'GET /signin', 'GET /admin']):
                return False
            if 'Bad request' in message and ('√Ä' in message or 'SSH-2.0' in message):
                return False
            if 'HTTP/2.0' in message:
                return False
        return True

# –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä –∫ werkzeug logger
werkzeug_logger = logging.getLogger('werkzeug')
werkzeug_logger.addFilter(NoBotsLogFilter())
werkzeug_logger.setLevel(logging.ERROR)

app = Flask(__name__)

# Rate limiting
request_counts = defaultdict(list)
RATE_LIMIT_REQUESTS = 10
RATE_LIMIT_WINDOW = 60

def is_rate_limited(ip):
    now = time.time()
    request_counts[ip] = [req_time for req_time in request_counts[ip] if now - req_time < RATE_LIMIT_WINDOW]
    if len(request_counts[ip]) >= RATE_LIMIT_REQUESTS:
        return True
    request_counts[ip].append(now)
    return False

def extract_payment_info_from_payment_id(payment_id):
    try:
        if payment_id and payment_id.startswith("bot_"):
            parts = payment_id.split("_")
            if len(parts) == 5:
                discount_value = int(parts[3]) if parts[3].isdigit() else 0
                if discount_value % 500 != 0:
                    discount_value = 0
                return {
                    'user_id': int(parts[1]),
                    'tariff': parts[2],
                    'referral_discount': discount_value
                }
            elif len(parts) == 4:
                return {
                    'user_id': int(parts[1]),
                    'tariff': parts[2],
                    'referral_discount': 0
                }
            elif len(parts) >= 2:
                return {
                    'user_id': int(parts[1]),
                    'tariff': parts[2] if len(parts) > 2 else 'basic',
                    'referral_discount': 0
                }
    except (ValueError, IndexError):
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ –∏–∑ payment_id: {payment_id}")
    return None

def extract_user_id_from_webhook_data(data):
    possible_fields = [
        'user_comment', 'comment', 'custom_field', 'utm_source',
        'description', 'product_name', 'order_comment', 'client_comment'
    ]
    for field in possible_fields:
        payment_id = data.get(field)
        if payment_id:
            payment_info = extract_payment_info_from_payment_id(payment_id)
            if payment_info:
                return payment_info['user_id'], payment_id
    return None, None

def send_telegram_message(user_id, message):
    url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
    data = {
        "chat_id": user_id,
        "text": message,
        "parse_mode": "HTML"
    }
    try:
        response = requests.post(url, json=data, timeout=10)
        return response.status_code == 200
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        return False

def get_user_info(user_id):
    url = f"https://api.telegram.org/bot{BOT_TOKEN}/getChat"
    data = {"chat_id": user_id}
    try:
        response = requests.post(url, json=data, timeout=5)
        if response.status_code == 200:
            result = response.json()
            user_data = result.get("result", {})
            username = user_data.get("username")
            first_name = user_data.get("first_name", "")
            last_name = user_data.get("last_name", "")
            if username:
                return f"@{username}"
            elif first_name or last_name:
                return f"{first_name} {last_name}".strip()
        return f"ID: {user_id}"
    except:
        return f"ID: {user_id}"

@app.route('/webhook/getcourse', methods=['POST'])
def getcourse_webhook():
    print(f"WEBHOOK: –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å: {request.method} {request.url}")
    try:
        data = request.get_json()
        print(f"WEBHOOK: –î–∞–Ω–Ω—ã–µ - {data}")
        user_id, payment_id = extract_user_id_from_webhook_data(data)
        
        if user_id:
            status = data.get('status', '').lower()
            payment_status = data.get('payment_status', '').lower()
            
            is_success = (
                status in ['success', 'paid', 'completed'] or 
                payment_status in ['success', 'paid', 'completed']
            )
            
            if is_success:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∞—Ä–∏—Ñ
                if "_basic_" in payment_id:
                    tariff_type = "basic"
                    tariff_name = "¬´–î–ª—è —Å–µ–±—è¬ª"
                elif "_vip_" in payment_id:
                    tariff_type = "vip"
                    tariff_name = "¬´–í–ò–ü –ñ–∏–∑–Ω—å¬ª"
                elif "_course_" in payment_id:
                    tariff_type = "course"
                    tariff_name = "¬´–ö—É—Ä—Å¬ª"
                else:
                    tariff_type = "unknown"
                    tariff_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ"
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
                try:
                    db.save_subscription(user_id, tariff_type, payment_id)
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
                
                # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                success_msg = f"""üéâ <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞—à–∞ –æ–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!</b>

‚úÖ –î–æ—Å—Ç—É–ø –∫ –æ–Ω–ª–∞–π–Ω-–∞–≤–∞—Ç–∞—Ä—É –¢–∞—Ç—å—è–Ω—ã –°–æ–ª–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω

üéØ <b>–í–∞—à —Ç–∞—Ä–∏—Ñ:</b> {tariff_name}"""
                
                send_telegram_message(user_id, success_msg)
                
                # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞–º
                if ADMIN_IDS:
                    user_info = get_user_info(user_id)
                    admin_msg = f"""üîî <b>–ù–û–í–ê–Ø –û–ü–õ–ê–¢–ê!</b>

üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {user_info}
üéØ <b>–¢–∞—Ä–∏—Ñ:</b> {tariff_name}
üÜî <b>Telegram ID:</b> {user_id}
üí≥ <b>–°—Ç–∞—Ç—É—Å:</b> –û–ø–ª–∞—á–µ–Ω–æ
üìÖ <b>–í—Ä–µ–º—è:</b> {datetime.now().strftime('%d.%m.%Y %H:%M')}"""
                    
                    for admin_id in ADMIN_IDS:
                        send_telegram_message(admin_id, admin_msg)
                
                # –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –±–æ–Ω—É—Å—ã
                try:
                    payment_info = extract_payment_info_from_payment_id(payment_id)
                    referral_discount = payment_info.get('referral_discount', 0) if payment_info else 0
                    
                    if referral_discount > 0:
                        db.use_referral_balance(user_id, referral_discount)
                        
                    # –ù–∞—á–∏—Å–ª—è–µ–º –±–æ–Ω—É—Å —Ä–µ—Ñ–µ—Ä–µ—Ä—É
                    from handlers.referral import add_referral_bonus_if_needed
                    loop = asyncio.new_event_loop()
                    asyncio.set_event_loop(loop)
                    try:
                        loop.run_until_complete(add_referral_bonus_if_needed(user_id))
                    finally:
                        loop.close()
                        
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –±–æ–Ω—É—Å–æ–≤: {e}")
                
                return jsonify({"status": "success", "message": "–ü–æ–¥–ø–∏—Å–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞"})
        
        return jsonify({"status": "ignored", "message": "No valid payment data"})
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ webhook: {e}")
        return jsonify({"status": "error", "message": str(e)}), 500

@app.route('/', methods=['GET'])
def index():
    client_ip = request.environ.get('HTTP_X_REAL_IP', request.remote_addr)
    if is_rate_limited(client_ip):
        return jsonify({"error": "Rate limit exceeded"}), 429
    return jsonify({
        "service": "Tatyana Solo Bot",
        "status": "running"
    })

@app.route('/health', methods=['GET'])
def health_check():
    return jsonify({"status": "ok"})

@app.errorhandler(404)
def not_found(error):
    return jsonify({"error": "Not found"}), 404

def run_webhook_server():
    """–ó–∞–ø—É—Å–∫ webhook —Å–µ—Ä–≤–µ—Ä–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
    try:
        print("Webhook —Å–µ—Ä–≤–µ—Ä —Å—Ç–∞—Ä—Ç—É–µ—Ç –Ω–∞ 0.0.0.0:8080")
        app.run(host='0.0.0.0', port=8080, debug=False)
    except Exception as e:
        print(f"–û–®–ò–ë–ö–ê webhook —Å–µ—Ä–≤–µ—Ä–∞: {e}")

# =================== END WEBHOOK SERVER ===================

async def system_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
    errors = []
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞
    if not BOT_TOKEN:
        errors.append("BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–∞–ø–æ–∫
    required_dirs = ['media/images', 'media/videos', 'media/documents', 'media/otziv']
    for dir_path in required_dirs:
        if not Path(dir_path).exists():
            errors.append(f"–ü–∞–ø–∫–∞ {dir_path} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    
    # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –∫—É–ø–∏-–≤–∏–¥–µ–æ (–Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–∞—è –æ—à–∏–±–∫–∞)
    kupi_video_path = "media/video/kupi.mp4"
    if not Path(kupi_video_path).exists():
        print(f"‚ö†Ô∏è  –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –ö—É–ø–∏-–≤–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: {kupi_video_path}")
        print("   –°–∏—Å—Ç–µ–º–∞ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å, –Ω–æ –∫—É–ø–∏-–≤–∏–¥–µ–æ –Ω–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    try:
        init_db()
    except Exception as e:
        errors.append(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤ –º–æ–¥—É–ª–µ–π
    try:
        from core.config import TEXTS, TARIFF_BASIC_PRICE, TARIFF_VIP_PRICE
        if not TEXTS:
            errors.append("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è TEXTS –ø—É—Å—Ç–∞")
    except ImportError as e:
        errors.append(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
    
    if errors:
        print("–û–ë–ù–ê–†–£–ñ–ï–ù–´ –û–®–ò–ë–ö–ò –ü–†–ò –ó–ê–ü–£–°–ö–ï:")
        for error in errors:
            print(f"  {error}")
        print()
        return False
    else:
        print("–í—Å–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        return True

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
    if not await system_check():
        print("–ó–∞–ø—É—Å–∫ –ø—Ä–µ—Ä–≤–∞–Ω –∏–∑-–∑–∞ –æ—à–∏–±–æ–∫ —Å–∏—Å—Ç–µ–º—ã")
        return
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
    bot = Bot(
        token=BOT_TOKEN,
        default=DefaultBotProperties(parse_mode=ParseMode.HTML)
    )
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
    dp = Dispatcher()
    
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–æ–≤
    dp.include_router(start.router)
    dp.include_router(info.router)
    dp.include_router(tariffs.router)
    dp.include_router(support.router)
    dp.include_router(payment.router)
    dp.include_router(subscription.router)
    dp.include_router(referral.router)
    dp.include_router(news.router)  # –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π
    # AI —á–∞—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–º, —á—Ç–æ–±—ã –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞—Ç—å –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    dp.include_router(ai_chat.router)
    
    # –ó–∞–ø—É—Å–∫ webhook —Å–µ—Ä–≤–µ—Ä–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    webhook_thread = threading.Thread(target=run_webhook_server, daemon=True)
    webhook_thread.start()
    print("Webhook —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 8080")
    
    # –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á
    auto_spam_task = asyncio.create_task(start_auto_spam_task(bot))
    kupi_video_task = asyncio.create_task(kupi_video_background_task(bot))
    daily_reset_task = asyncio.create_task(daily_thread_reset_task())
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    print("Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç...")
    try:
        await dp.start_polling(bot)
    except KeyboardInterrupt:
        print("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞: {e}")
        print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        # –û—Ç–º–µ–Ω—è–µ–º —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
        auto_spam_task.cancel()
        kupi_video_task.cancel()
        daily_reset_task.cancel()
        try:
            await auto_spam_task
        except asyncio.CancelledError:
            pass
        try:
            await kupi_video_task
        except asyncio.CancelledError:
            pass
        try:
            await daily_reset_task
        except asyncio.CancelledError:
            pass
        await bot.session.close()
        print("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

if __name__ == "__main__":
    asyncio.run(main())