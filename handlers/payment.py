import os
import logging
from aiogram import Router, Bot
from aiogram.types import FSInputFile
from keyboards.inline import get_documents_menu
from core.config import TEXTS, DOCUMENTS, DOCUMENT_LINKS
from utils.message_utils import send_split_message

logger = logging.getLogger(__name__)

router = Router()

async def send_payment_success(bot: Bot, user_id: int, tariff_name: str, referral_discount: int = 0):
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏
    
    Args:
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        tariff_name: –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞
        referral_discount: –°—É–º–º–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∫–∏–¥–∫–∏ –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è
    """
    
    try:
        # –°–ø–∏—Å—ã–≤–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –±–æ–Ω—É—Å—ã, –µ—Å–ª–∏ –±—ã–ª–∞ —Å–∫–∏–¥–∫–∞
        discount_text = ""
        if referral_discount > 0:
            try:
                from core.database import db
                if db.use_referral_balance(user_id, referral_discount):
                    logger.info(f"–°–ø–∏—Å–∞–Ω–æ {referral_discount} —Ä—É–±. —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                    discount_text = f"\n\nüí∞ –ü—Ä–∏–º–µ–Ω–µ–Ω–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∫–∏–¥–∫–∞: {referral_discount} ‚ÇΩ"
                else:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–ø–∏—Å–∞—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å {referral_discount} —Ä—É–±. —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —Å–ø–∏—Å–∞–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è {user_id}: {e}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ
        success_text = f"{TEXTS['payment_success']}\n\nüéØ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω —Ç–∞—Ä–∏—Ñ: ¬´{tariff_name}¬ª{discount_text}"
        await send_split_message(bot, success_text, user_id)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã
        await send_documents(bot, user_id)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö
        await send_split_message(
            bot, 
            TEXTS['documents_info'],
            user_id,
            reply_markup=get_documents_menu()
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—É–ø–µ—Ä –Ω–æ–≤–æ—Å—Ç–∏ –Ω–æ–≤–æ–º—É –ø–æ–¥–ø–∏—Å—á–∏–∫—É
        try:
            from send_super_novosti import send_super_novosti_to_new_subscriber
            await send_super_novosti_to_new_subscriber(user_id)
            logger.info(f"–°—É–ø–µ—Ä –Ω–æ–≤–æ—Å—Ç–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–æ–≤–æ–º—É –ø–æ–¥–ø–∏—Å—á–∏–∫—É {user_id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—É–ø–µ—Ä –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–æ–≤–æ–º—É –ø–æ–¥–ø–∏—Å—á–∏–∫—É {user_id}: {e}")

        # –ù–∞—á–∏—Å–ª—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å, –µ—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–∞—è –æ–ø–ª–∞—Ç–∞
        try:
            from handlers.referral import add_referral_bonus_if_needed
            await add_referral_bonus_if_needed(user_id)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞ –¥–ª—è {user_id}: {e}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

async def send_documents(bot: Bot, user_id: int):
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    
    Args:
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ñ–µ—Ä—Ç—É
    oferta_path = DOCUMENTS["oferta"]
    if os.path.exists(oferta_path):
        try:
            oferta_file = FSInputFile(oferta_path)
            await bot.send_document(
                user_id, 
                oferta_file, 
                caption="üìÑ –ü—É–±–ª–∏—á–Ω–∞—è –æ—Ñ–µ—Ä—Ç–∞"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ñ–µ—Ä—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
    else:
        logger.error(f"–§–∞–π–ª –æ—Ñ–µ—Ä—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω: {oferta_path}")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö
    personal_data_path = DOCUMENTS["personal_data"]
    if os.path.exists(personal_data_path):
        try:
            personal_data_file = FSInputFile(personal_data_path)
            await bot.send_document(
                user_id, 
                personal_data_file, 
                caption="üìÑ –°–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–≥–ª–∞—Å–∏—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
    else:
        logger.error(f"–§–∞–π–ª —Å–æ–≥–ª–∞—Å–∏—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω: {personal_data_path}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook –æ—Ç GetCourse
async def process_payment_webhook(bot: Bot, webhook_data: dict):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ webhook –æ —Å—Ç–∞—Ç—É—Å–µ –ø–ª–∞—Ç–µ–∂–∞ –æ—Ç GetCourse
    
    Args:
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        webhook_data: –î–∞–Ω–Ω—ã–µ webhook
    """
    from utils.getcourse import validate_payment_webhook
    # –§—É–Ω–∫—Ü–∏–∏ —Ç–µ–ø–µ—Ä—å –≤—Å—Ç—Ä–æ–µ–Ω—ã –≤ main.py
    from main import extract_payment_info_from_payment_id, extract_user_id_from_webhook_data
    
    # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ payment_id
    payment_info = None
    
    # –ò—â–µ–º payment_id –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –ø–æ–ª—è—Ö webhook
    possible_fields = [
        'user_comment', 'comment', 'custom_field', 'utm_source',
        'description', 'product_name', 'order_comment', 'client_comment'
    ]
    
    for field in possible_fields:
        payment_id = webhook_data.get(field)
        if payment_id:
            payment_info = extract_payment_info_from_payment_id(payment_id)
            if payment_info:
                break
    
    # Fallback –∫ —Å—Ç–∞—Ä–æ–º—É –º–µ—Ç–æ–¥—É –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∏–∑ payment_id
    if not payment_info:
        legacy_payment_info = validate_payment_webhook(webhook_data)
        if legacy_payment_info:
            payment_info = {
                'user_id': legacy_payment_info["user_id"],
                'tariff': legacy_payment_info["tariff"],
                'referral_discount': 0
            }
    
    if payment_info and webhook_data.get("status") == "success":
        user_id = payment_info["user_id"]
        tariff = payment_info["tariff"]
        referral_discount = payment_info.get("referral_discount", 0)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞
        if tariff == "basic":
            tariff_name = "–î–ª—è —Å–µ–±—è"
        elif tariff == "vip":
            tariff_name = "–í–ò–ü –ñ–∏–∑–Ω—å"  
        elif tariff == "course":
            tariff_name = "–ö—É—Ä—Å"
        else:
            tariff_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–∫–∏–¥–∫–µ
        await send_payment_success(bot, user_id, tariff_name, referral_discount)
        
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}, —Ç–∞—Ä–∏—Ñ {tariff_name}, —Å–∫–∏–¥–∫–∞ {referral_discount} —Ä—É–±.")
    else:
        logger.warning(f"Webhook –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∏–ª–∏ —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ –Ω–µ —É—Å–ø–µ—à–Ω—ã–π: {webhook_data}")