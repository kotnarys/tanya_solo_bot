import os
from aiogram import Router, Bot
from aiogram.types import FSInputFile
from keyboards.inline import get_documents_menu
from config import TEXTS, DOCUMENTS, DOCUMENT_LINKS

router = Router()

async def send_payment_success(bot: Bot, user_id: int, tariff_name: str):
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏
    
    Args:
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        tariff_name: –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞
    """
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ
        success_text = f"{TEXTS['payment_success']}\n\nüéØ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω —Ç–∞—Ä–∏—Ñ: ¬´{tariff_name}¬ª"
        await bot.send_message(user_id, success_text)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã
        await send_documents(bot, user_id)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö
        await bot.send_message(
            user_id, 
            TEXTS['documents_info'], 
            reply_markup=get_documents_menu()
        )
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

async def send_documents(bot: Bot, user_id: int):
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    
    Args:
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ñ–µ—Ä—Ç—É
    oferta_path = DOCUMENTS["oferta"]
    if os.path.exists(oferta_path):
        try:
            oferta_file = FSInputFile(oferta_path)
            await bot.send_document(
                user_id, 
                oferta_file, 
                caption="üìÑ –ü—É–±–ª–∏—á–Ω–∞—è –æ—Ñ–µ—Ä—Ç–∞"
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ñ–µ—Ä—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
    else:
        print(f"–§–∞–π–ª –æ—Ñ–µ—Ä—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω: {oferta_path}")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö
    personal_data_path = DOCUMENTS["personal_data"]
    if os.path.exists(personal_data_path):
        try:
            personal_data_file = FSInputFile(personal_data_path)
            await bot.send_document(
                user_id, 
                personal_data_file, 
                caption="üìÑ –°–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–≥–ª–∞—Å–∏—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
    else:
        print(f"–§–∞–π–ª —Å–æ–≥–ª–∞—Å–∏—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω: {personal_data_path}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook –æ—Ç GetCourse
async def process_payment_webhook(bot: Bot, webhook_data: dict):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ webhook –æ —Å—Ç–∞—Ç—É—Å–µ –ø–ª–∞—Ç–µ–∂–∞ –æ—Ç GetCourse
    
    Args:
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        webhook_data: –î–∞–Ω–Ω—ã–µ webhook
    """
    from utils.getcourse import validate_payment_webhook
    
    # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ webhook
    payment_info = validate_payment_webhook(webhook_data)
    
    if payment_info and webhook_data.get("status") == "success":
        user_id = payment_info["user_id"]
        tariff = payment_info["tariff"]
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞
        tariff_name = "–î–ª—è —Å–µ–±—è" if tariff == "basic" else "–í–ò–ü –ñ–∏–∑–Ω—å"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ
        await send_payment_success(bot, user_id, tariff_name)
        
        print(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}, —Ç–∞—Ä–∏—Ñ {tariff_name}")
    else:
        print(f"Webhook –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∏–ª–∏ —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ –Ω–µ —É—Å–ø–µ—à–Ω—ã–π: {webhook_data}")