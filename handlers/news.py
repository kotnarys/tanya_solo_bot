import asyncio
import logging
from datetime import datetime
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from core.config import NEWS_ADMIN_IDS
from core.database import db
from utils.message_utils import answer_split_text

logger = logging.getLogger(__name__)
router = Router()

class NewsStates(StatesGroup):
    choosing_audience = State()      # –í—ã–±–æ—Ä –∞—É–¥–∏—Ç–æ—Ä–∏–∏
    waiting_for_message = State()    # –û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    confirming_send = State()        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏

def get_audience_menu():
    """–ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∞—É–¥–∏—Ç–æ—Ä–∏–∏ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üì¢ –í—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –±–æ—Ç–∞", callback_data="news_all_users")],
        [InlineKeyboardButton(text="‚úÖ –¢–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º", callback_data="news_active_subscribers")],
        [InlineKeyboardButton(text="üéì –¢–æ–ª—å–∫–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –∫—É—Ä—Å–∞", callback_data="news_course_users")],
        [InlineKeyboardButton(text="üíé –¢–æ–ª—å–∫–æ –ø–ª–∞—Ç–Ω—ã–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º", callback_data="news_paid_subscribers")],
        [InlineKeyboardButton(text="üåü –¢–æ–ª—å–∫–æ VIP –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º", callback_data="news_vip_users")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="news_cancel")]
    ])
    return keyboard

def get_confirmation_menu():
    """–ú–µ–Ω—é –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data="news_confirm_send")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="news_cancel")]
    ])
    return keyboard

@router.message(Command("news"))
async def news_command(message: Message, state: FSMContext):
    """–ö–æ–º–∞–Ω–¥–∞ /news –¥–ª—è –∞–¥–º–∏–Ω–æ–≤"""
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞
    if user_id not in NEWS_ADMIN_IDS:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏")
        return
    
    text = """üîß <b>–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å - –†–∞—Å—Å—ã–ª–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π</b>

–í—ã–±–µ—Ä–∏—Ç–µ –∞—É–¥–∏—Ç–æ—Ä–∏—é –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:"""
    
    await message.answer(text, reply_markup=get_audience_menu())
    await state.set_state(NewsStates.choosing_audience)

@router.callback_query(F.data.startswith("news_"))
async def handle_news_callbacks(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö callback'–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π"""
    user_id = callback.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞
    if user_id not in NEWS_ADMIN_IDS:
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    data = callback.data
    
    if data == "news_cancel":
        await callback.message.edit_text("‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
        await state.clear()
        await callback.answer()
        return
    
    # –í—ã–±–æ—Ä –∞—É–¥–∏—Ç–æ—Ä–∏–∏
    if data in ["news_all_users", "news_active_subscribers", "news_course_users", "news_paid_subscribers", "news_vip_users"]:
        audience_names = {
            "news_all_users": "üì¢ –í—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –±–æ—Ç–∞",
            "news_active_subscribers": "‚úÖ –¢–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º", 
            "news_course_users": "üéì –¢–æ–ª—å–∫–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –∫—É—Ä—Å–∞",
            "news_paid_subscribers": "üíé –¢–æ–ª—å–∫–æ –ø–ª–∞—Ç–Ω—ã–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º",
            "news_vip_users": "üåü –¢–æ–ª—å–∫–æ VIP –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"
        }
        
        audience_type = data.replace("news_", "")
        audience_name = audience_names[data]
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(audience_type=audience_type, audience_name=audience_name)
        
        await callback.message.edit_text(
            f"üìù <b>–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:</b>\n\n"
            f"–ê—É–¥–∏—Ç–æ—Ä–∏—è: {audience_name}\n\n"
            f"‚ö†Ô∏è –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è: —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, –¥–æ–∫—É–º–µ–Ω—Ç—ã, –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n\n"
            f"üí° –ß—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É, –Ω–∞–ø–∏—à–∏—Ç–µ: <b>–û–¢–ú–ï–ù–ê</b>"
        )
        await state.set_state(NewsStates.waiting_for_message)
        await callback.answer()
        return
    
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
    if data == "news_confirm_send":
        await callback.answer("üöÄ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É...")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        user_data = await state.get_data()
        audience_type = user_data.get("audience_type")
        message_data = user_data.get("message_data")
        
        if not audience_type or not message_data:
            await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            await state.clear()
            return
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É
        await start_broadcast(callback.message, audience_type, message_data, user_id, state)
        return

@router.message(NewsStates.waiting_for_message)
async def handle_broadcast_message(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –æ—Ç –∞–¥–º–∏–Ω–∞"""
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞
    if user_id not in NEWS_ADMIN_IDS:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
        await state.clear()
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—É –æ—Ç–º–µ–Ω—ã
    if message.text and message.text.upper().strip() == "–û–¢–ú–ï–ù–ê":
        await message.answer("‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
        await state.clear()
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏
    user_data = await state.get_data()
    audience_type = user_data.get("audience_type")
    audience_name = user_data.get("audience_name")
    
    if not audience_type:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –∞—É–¥–∏—Ç–æ—Ä–∏—è –Ω–µ –≤—ã–±—Ä–∞–Ω–∞")
        await state.clear()
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    message_data = {
        "text": message.text,
        "content_type": message.content_type,
        "message_id": message.message_id
    }
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    if message.photo:
        message_data["photo"] = message.photo[-1].file_id
        message_data["caption"] = message.caption
    elif message.video:
        message_data["video"] = message.video.file_id
        message_data["caption"] = message.caption
    elif message.document:
        message_data["document"] = message.document.file_id
        message_data["caption"] = message.caption
    elif message.voice:
        message_data["voice"] = message.voice.file_id
    elif message.video_note:
        message_data["video_note"] = message.video_note.file_id
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(message_data=message_data)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    preview_text = f"""üìã <b>–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å—Å—ã–ª–∫–∏:</b>

<b>–ê—É–¥–∏—Ç–æ—Ä–∏—è:</b> {audience_name}

<b>–°–æ–¥–µ—Ä–∂–∏–º–æ–µ:</b> {get_content_description(message)}

–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É?"""
    
    await message.answer(preview_text, reply_markup=get_confirmation_menu())
    await state.set_state(NewsStates.confirming_send)

async def start_broadcast(message: Message, audience_type: str, message_data: dict, admin_id: int, state: FSMContext):
    """–ó–∞–ø—É—Å–∫ –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
        recipients = get_recipients_list(audience_type)
        
        if not recipients:
            await message.edit_text("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏")
            await state.clear()
            return
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –ë–î –æ —Ä–∞—Å—Å—ã–ª–∫–µ
        broadcast_id = db.create_news_broadcast(
            admin_id=admin_id,
            audience_type=audience_type,
            message_text=message_data.get("text", ""),
            media_type=message_data.get("content_type", "text"),
            total_recipients=len(recipients)
        )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        progress_message = await message.edit_text(
            f"üöÄ <b>–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞</b>\n\n"
            f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: 0\n"
            f"‚ùå –û—à–∏–±–æ–∫: 0"
        )
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É
        sent_count, error_count = await send_broadcast_messages(recipients, message_data, progress_message)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –ë–î
        db.update_news_broadcast_stats(broadcast_id, sent_count, error_count)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        await progress_message.edit_text(
            f"‚úÖ <b>–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞</b>\n\n"
            f"üì§ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count}\n"
            f"‚ùå –û—à–∏–±–æ–∫: {error_count}"
        )
        
        await state.clear()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏: {e}")
        await message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ: {str(e)}")
        await state.clear()

async def send_broadcast_messages(recipients: list, message_data: dict, progress_message: Message):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—É—á–∞—Ç–µ–ª—è–º —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
    sent_count = 0
    error_count = 0
    
    for i, user_id in enumerate(recipients):
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            bot = progress_message.bot
            
            if message_data.get("photo"):
                await bot.send_photo(
                    user_id, 
                    message_data["photo"], 
                    caption=message_data.get("caption")
                )
            elif message_data.get("video"):
                await bot.send_video(
                    user_id, 
                    message_data["video"], 
                    caption=message_data.get("caption")
                )
            elif message_data.get("document"):
                await bot.send_document(
                    user_id, 
                    message_data["document"], 
                    caption=message_data.get("caption")
                )
            elif message_data.get("voice"):
                await bot.send_voice(user_id, message_data["voice"])
            elif message_data.get("video_note"):
                await bot.send_video_note(user_id, message_data["video_note"])
            else:
                await bot.send_message(user_id, message_data.get("text", ""))
            
            sent_count += 1
            
        except Exception as e:
            error_count += 1
            logger.warning(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π
        if (i + 1) % 10 == 0:
            try:
                await progress_message.edit_text(
                    f"üöÄ <b>–†–∞—Å—Å—ã–ª–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ</b>\n\n"
                    f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count}\n"
                    f"‚ùå –û—à–∏–±–æ–∫: {error_count}"
                )
            except:
                pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        
        # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è flood control
        await asyncio.sleep(0.05)
    
    return sent_count, error_count

def get_recipients_count(audience_type: str) -> int:
    """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏"""
    if audience_type == "all_users":
        return db.get_all_users_count()
    elif audience_type == "active_subscribers":
        return len(db.get_active_subscribers())
    elif audience_type == "course_users":
        return db.get_course_users_count()
    elif audience_type == "paid_subscribers":
        return db.get_paid_subscribers_count()
    elif audience_type == "vip_users":
        return db.get_vip_users_count()
    else:
        return 0

def get_recipients_list(audience_type: str) -> list:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏"""
    if audience_type == "all_users":
        return db.get_all_users()
    elif audience_type == "active_subscribers":
        return db.get_active_subscribers()
    elif audience_type == "course_users":
        return db.get_course_users()
    elif audience_type == "paid_subscribers":
        return db.get_paid_subscribers()
    elif audience_type == "vip_users":
        return db.get_vip_users()
    else:
        return []

def get_content_description(message: Message) -> str:
    """–ü–æ–ª—É—á–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    if message.photo:
        return f"–§–æ—Ç–æ{' —Å –ø–æ–¥–ø–∏—Å—å—é' if message.caption else ''}"
    elif message.video:
        return f"–í–∏–¥–µ–æ{' —Å –ø–æ–¥–ø–∏—Å—å—é' if message.caption else ''}"
    elif message.document:
        return f"–î–æ–∫—É–º–µ–Ω—Ç{' —Å –ø–æ–¥–ø–∏—Å—å—é' if message.caption else ''}"
    elif message.voice:
        return "–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
    elif message.video_note:
        return "–í–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏–µ"
    else:
        return "–¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"