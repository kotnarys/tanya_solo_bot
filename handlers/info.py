import os
import asyncio
from aiogram import Router, F
from aiogram.types import CallbackQuery, FSInputFile, InputMediaPhoto
from keyboards.inline import get_avatar_info_menu, get_helps_menu, get_reviews_menu
from config import TEXTS, IMAGES, REVIEWS_IMAGES
from auto_spam import update_user_activity

router = Router()

@router.callback_query(F.data == "what_is_avatar")
async def what_is_avatar_handler(callback: CallbackQuery):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–º, —á—Ç–æ —Ç–∞–∫–æ–µ –æ–Ω–ª–∞–π–Ω-–∞–≤–∞—Ç–∞—Ä"""
    user_id = callback.from_user.id
    update_user_activity(user_id)
    
    image_path = IMAGES["what_is_avatar"]
    
    # –ù–ï —É–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
    if os.path.exists(image_path):
        photo = FSInputFile(image_path)
        await callback.message.answer_photo(
            photo,
            caption=TEXTS["what_is_avatar"],
            reply_markup=get_avatar_info_menu()
        )
    else:
        await callback.message.answer(
            TEXTS["what_is_avatar"], 
            reply_markup=get_avatar_info_menu()
        )
    
    try:
        await callback.answer()
    except Exception:
        pass

@router.callback_query(F.data == "what_helps")
async def what_helps_handler(callback: CallbackQuery):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö –∞–≤–∞—Ç–∞—Ä–∞"""
    user_id = callback.from_user.id
    update_user_activity(user_id)
    
    image_path = IMAGES["what_helps"]
    
    # –ù–ï —É–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
    if os.path.exists(image_path):
        photo = FSInputFile(image_path)
        await callback.message.answer_photo(
            photo,
            caption=TEXTS["what_helps"],
            reply_markup=get_helps_menu()
        )
    else:
        await callback.message.answer(
            TEXTS["what_helps"], 
            reply_markup=get_helps_menu()
        )
    
    try:
        await callback.answer()
    except Exception:
        pass

@router.callback_query(F.data == "reviews")
async def reviews_handler(callback: CallbackQuery):
    """–û—Ç–∑—ã–≤—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    user_id = callback.from_user.id
    update_user_activity(user_id)
    
    # –ù–ï —É–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
    
    # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç —Å –∫–Ω–æ–ø–∫–∞–º–∏
    await callback.message.answer(
        TEXTS["reviews"], 
        reply_markup=get_reviews_menu()
    )
    
    # –°–æ–±–∏—Ä–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –æ—Ç–∑—ã–≤–æ–≤
    media_group = []
    
    for image_path in REVIEWS_IMAGES:
        if os.path.exists(image_path):
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (–º–∞–∫—Å–∏–º—É–º 10 –ú–ë –¥–ª—è —Ñ–æ—Ç–æ –≤ Telegram)
                file_size = os.path.getsize(image_path)
                max_size = 10 * 1024 * 1024  # 10 –ú–ë
                
                if file_size <= max_size:
                    photo = FSInputFile(image_path)
                    media_group.append(InputMediaPhoto(media=photo))
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ {image_path}: {e}")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã (Telegram –ø–æ–∑–≤–æ–ª—è–µ—Ç –º–∞–∫—Å–∏–º—É–º 10 —Ñ–æ—Ç–æ –≤ –≥—Ä—É–ø–ø–µ)
    if media_group:
        try:
            # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –≥—Ä—É–ø–ø—ã –ø–æ 10 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
            chunk_size = 10
            for i in range(0, len(media_group), chunk_size):
                chunk = media_group[i:i + chunk_size]
                await callback.message.answer_media_group(chunk)
                
                # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –≥—Ä—É–ø–ø–∞–º–∏
                if i + chunk_size < len(media_group):
                    await asyncio.sleep(0.5)
                    
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã: {e}")
            await callback.message.answer("üì∏ –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –æ—Ç–∑—ã–≤–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    else:
        # –ï—Å–ª–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≥–ª—É—à–∫—É
        await callback.message.answer("üì∏ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –æ—Ç–∑—ã–≤–æ–≤ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –ø–æ–∑–∂–µ")
    
    try:
        await callback.answer()
    except Exception:
        pass