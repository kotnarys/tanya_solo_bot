from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from core.database import db
from datetime import datetime
from utils.message_utils import answer_split_text

router = Router()

@router.message(Command("subscription", "–ø–æ–¥–ø–∏—Å–∫–∞"))
async def check_subscription(message: Message):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—á–Ω—ã–π –¥–æ—Å—Ç—É–ø
    from core.config import PERMANENT_ACCESS_IDS
    if user_id in PERMANENT_ACCESS_IDS:
        text = """‚úÖ <b>–£ –≤–∞—Å –≤–µ—á–Ω—ã–π –¥–æ—Å—Ç—É–ø!</b>

üåü <b>–°—Ç–∞—Ç—É—Å:</b> –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
‚ôæÔ∏è <b>–î–µ–π—Å—Ç–≤—É–µ—Ç:</b> –ë–µ—Å—Å—Ä–æ—á–Ω–æ

üéâ –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ò–ò –¢–∞—Ç—å—è–Ω—ã –°–æ–ª–æ –¥–æ—Å—Ç—É–ø–Ω—ã!"""
        
    else:
        subscription = db.get_user_subscription(user_id)
        
        if subscription and subscription.get('is_active'):
            if subscription['tariff_type'] == 'basic':
                tariff_name = "¬´–î–ª—è —Å–µ–±—è¬ª"  
            elif subscription['tariff_type'] == 'vip':
                tariff_name = "¬´–í–ò–ü –ñ–∏–∑–Ω—å¬ª"
            elif subscription['tariff_type'] == 'course':
                tariff_name = "¬´–ö—É—Ä—Å¬ª"
            else:
                tariff_name = "¬´–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ¬ª"
            expires_date = datetime.fromisoformat(subscription['expires_at']).strftime('%d.%m.%Y')
            days_left = subscription['days_left']
            
            text = f"""‚úÖ <b>–£ –≤–∞—Å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞!</b>

üéØ <b>–¢–∞—Ä–∏—Ñ:</b> {tariff_name}
üìÖ <b>–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ:</b> {expires_date}
‚è∞ <b>–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π:</b> {days_left}

üéâ –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ò–ò –¢–∞—Ç—å—è–Ω—ã –°–æ–ª–æ –¥–æ—Å—Ç—É–ø–Ω—ã!"""
            
        elif subscription and subscription.get('is_expired'):
            text = """‚ùå <b>–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞</b>

üí´ –ü—Ä–æ–¥–ª–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤—Å–µ–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏ –ò–ò –¢–∞—Ç—å—è–Ω—ã –°–æ–ª–æ!

üîÑ –ù–∞–∂–º–∏—Ç–µ "–û–§–û–†–ú–ò–¢–¨ –ü–û–î–ü–ò–°–ö–£" –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é"""
            
        else:
            text = """ü§ñ <b>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏</b>

‚ú® –û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º –ò–ò –¢–∞—Ç—å—è–Ω—ã –°–æ–ª–æ!

üëâ –ù–∞–∂–º–∏—Ç–µ "–û–§–û–†–ú–ò–¢–¨ –ü–û–î–ü–ò–°–ö–£" –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é"""
    
    await answer_split_text(message, text)

