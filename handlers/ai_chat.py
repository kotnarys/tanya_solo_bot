from aiogram import Router, F
from aiogram.types import Message, Voice, Audio
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import logging
import os
import tempfile

from core.openai_client import openai_client
from core.database import db
from utils.message_utils import answer_split_text

logger = logging.getLogger(__name__)

router = Router()

class AIChat(StatesGroup):
    waiting_for_message = State()

@router.message(F.text)
async def handle_ai_chat(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è OpenAI —á–∞—Ç–∞ (–¥–ª—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ —Å 30 –∏—é–ª—è 15:00 –ú–°–ö)"""
    
    try:
        user_id = message.from_user.id
        text = message.text
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ—Å—Ç—É–ø –∫ OpenAI
        has_access = openai_client.has_openai_access(user_id)
        
        if not has_access:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫–∏
            await message.answer("üíé –ü—Ä–∏–≤–µ—Ç, –¥–æ—Ä–æ–≥–∞—è! –î–ª—è –æ–±—â–µ–Ω–∏—è —Å–æ –º–Ω–æ–π –Ω—É–∂–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞.\n\nüåü –í—ã–±–µ—Ä–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç–∞—Ä–∏—Ñ –∏ –ø–æ–ª—É—á–∏ –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º –ò–ò –¢–∞—Ç—å—è–Ω—ã –°–æ–ª–æ!\n\nüëâ –ñ–º–∏ /start —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–∞—Ä–∏—Ñ—ã")
            return
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞
        await process_text_message(message, user_id, text)
        
    except Exception as e:
        logger.error(f"‚ùå AI handler error for user {message.from_user.id}: {e}")
        try:
            await message.answer("üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç–∫—É üíï")
        except:
            pass

@router.message(F.voice)
async def handle_voice_message(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ—Å—Ç—É–ø –∫ OpenAI
    if not openai_client.has_openai_access(user_id):
        return  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ –¥–æ—Å—Ç—É–ø–∞
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—á–∞—Ç–∏ (—Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π flood control)
        try:
            await message.bot.send_chat_action(message.chat.id, "typing")
        except Exception:
            pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ flood control
        
        # –°–∫–∞—á–∏–≤–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        voice_file = await message.bot.get_file(message.voice.file_id)
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        with tempfile.NamedTemporaryFile(suffix=".ogg", delete=False) as temp_file:
            temp_path = temp_file.name
            await message.bot.download_file(voice_file.file_path, temp_path)
        
        # –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ–º –∞—É–¥–∏–æ –≤ —Ç–µ–∫—Å—Ç
        transcribed_text = await openai_client.transcribe_audio(user_id, temp_path)
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        os.unlink(temp_path)
        
        if not transcribed_text:
            await answer_split_text(message, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return
        
        # –°—Ä–∞–∑—É –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –æ–±—ã—á–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–±–µ–∑ –ø–æ–∫–∞–∑–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞)
        await process_text_message(message, user_id, transcribed_text)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await answer_split_text(message, "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

@router.message(F.audio)
async def handle_audio_message(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞—É–¥–∏–æ —Ñ–∞–π–ª–æ–≤"""
    
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ—Å—Ç—É–ø –∫ OpenAI
    if not openai_client.has_openai_access(user_id):
        return  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ –¥–æ—Å—Ç—É–ø–∞
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—á–∞—Ç–∏ (—Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π flood control)
        try:
            await message.bot.send_chat_action(message.chat.id, "typing")
        except Exception:
            pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ flood control
        
        # –°–∫–∞—á–∏–≤–∞–µ–º –∞—É–¥–∏–æ —Ñ–∞–π–ª
        audio_file = await message.bot.get_file(message.audio.file_id)
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º
        file_extension = ".mp3" if message.audio.mime_type == "audio/mpeg" else ".ogg"
        with tempfile.NamedTemporaryFile(suffix=file_extension, delete=False) as temp_file:
            temp_path = temp_file.name
            await message.bot.download_file(audio_file.file_path, temp_path)
        
        # –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ–º –∞—É–¥–∏–æ –≤ —Ç–µ–∫—Å—Ç
        transcribed_text = await openai_client.transcribe_audio(user_id, temp_path)
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        os.unlink(temp_path)
        
        if not transcribed_text:
            await answer_split_text(message, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∞—É–¥–∏–æ —Ñ–∞–π–ª. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return
        
        # –°—Ä–∞–∑—É –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –æ–±—ã—á–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–±–µ–∑ –ø–æ–∫–∞–∑–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞)
        await process_text_message(message, user_id, transcribed_text)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await answer_split_text(message, "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

@router.message(F.photo)
async def handle_photo_message(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π"""
    
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ—Å—Ç—É–ø –∫ OpenAI
    if not openai_client.has_openai_access(user_id):
        return  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ –¥–æ—Å—Ç—É–ø–∞
    
    # –õ–∞—Å–∫–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è
    await answer_split_text(message, "ü§ó –ú–∏–ª–∞—è, —è –ø–æ–∫–∞ –Ω–µ —É–º–µ—é —Ä–∞–±–æ—Ç–∞—Ç—å —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏, –Ω–æ –æ—á–µ–Ω—å —Ö–æ—á—É —ç—Ç–æ–º—É –Ω–∞—É—á–∏—Ç—å—Å—è! ‚ú®\n\n–ú–æ–∂–µ—à—å –æ–ø–∏—Å–∞—Ç—å –º–Ω–µ —Å–ª–æ–≤–∞–º–∏, —á—Ç–æ –Ω–∞ —Ñ–æ—Ç–æ? –Ø —Å —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ–º –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å –ª—é–±—ã–º –≤–æ–ø—Ä–æ—Å–æ–º –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ üíï")

async def process_text_message(message: Message, user_id: int, text: str):
    """–û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–∏–∑ —Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∞—É–¥–∏–æ)"""
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ thread –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        thread_info = db.get_openai_thread(user_id)
        
        if not thread_info:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π thread
            thread_id = await openai_client.create_thread(user_id)
            if not thread_id:
                await answer_split_text(message, "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏ —á–∞—Ç–∞")
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º thread –≤ –ë–î
            db.save_openai_thread(user_id, thread_id)
        else:
            thread_id = thread_info['thread_id']
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—á–∞—Ç–∏ (—Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π flood control)
        try:
            await message.bot.send_chat_action(message.chat.id, "typing")
        except Exception:
            pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ flood control
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç OpenAI —á–µ—Ä–µ–∑ Assistant API
        response = await openai_client.send_message(user_id, thread_id, text)
        
        if response:
            # –û—á–∏—â–∞–µ–º HTML —Ç–µ–≥–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–µ—Ç –≤–µ—Ä–Ω—É—Ç—å OpenAI
            clean_response = response.replace('<br>', '\n').replace('<br/>', '\n').replace('<br />', '\n')
            # –£–¥–∞–ª—è–µ–º –¥—Ä—É–≥–∏–µ HTML —Ç–µ–≥–∏
            import re
            clean_response = re.sub(r'<[^>]+>', '', clean_response)
            await answer_split_text(message, clean_response)
        else:
            logger.error(f"‚ùå No AI response for user {user_id}")
            await answer_split_text(message, "üòî –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫... –ü–æ–ø—Ä–æ–±—É–π –Ω–∞–ø–∏—Å–∞—Ç—å –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å üíï\n\n–ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è, –Ω–∞–ø–∏—à–∏ /start –∏ –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")
        
    except Exception as e:
        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º flood control –æ—à–∏–±–∫–∏ –¥–ª—è send_chat_action
        if "Flood control exceeded" in str(e) and "SendChatAction" in str(e):
            logger.warning(f"‚ö†Ô∏è Flood control –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ typing –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞")
            return
        
        logger.error(f"‚ùå Error in process_text_message for {user_id}: {e}")
        try:
            await message.answer("üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è üíï")
        except:
            pass

