import os
from aiogram import Router, F
from aiogram.types import CallbackQuery, FSInputFile
from keyboards.inline import get_tariffs_menu, get_tariff_confirm_menu, get_back_to_tariffs
from core.config import TEXTS, IMAGES, TARIFF_BASIC_PRICE, TARIFF_VIP_PRICE, PERMANENT_ACCESS_IDS
# from promo_utils import get_tariffs_text_with_promo  # –£–¥–∞–ª–µ–Ω —Ñ–∞–π–ª promo_utils.py
from background.auto_spam import update_user_activity
from utils.message_utils import answer_split_text
from core.database import db

router = Router()

def get_price_with_referral_discount(user_id: int, original_price: int):
    """
    –í—ã—á–∏—Å–ª—è–µ—Ç —Ü–µ–Ω—É —Å —É—á–µ—Ç–æ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞
    
    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        original_price: –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞
        
    Returns:
        tuple: (discounted_price, discount_amount, has_discount)
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ—Å—Ç—É–ø –∫ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ
    if user_id not in PERMANENT_ACCESS_IDS:
        return original_price, 0, False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å
    if not db.is_referral_user_registered(user_id):
        return original_price, 0, False
    
    referral_info = db.get_referral_info(user_id)
    if not referral_info:
        return original_price, 0, False
    
    referral_balance = referral_info['referral_balance']
    if referral_balance <= 0:
        return original_price, 0, False
    
    # –í—ã—á–∏—Å–ª—è–µ–º —Å–∫–∏–¥–∫—É (–Ω–µ –±–æ–ª—å—à–µ —Ü–µ–Ω—ã —Ç–æ–≤–∞—Ä–∞)
    discount = min(referral_balance, original_price)
    discounted_price = max(0, original_price - discount)
    
    return discounted_price, discount, True

def format_price_with_discount(original_price: int, discounted_price: int, discount: int, has_discount: bool):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ü–µ–Ω—É —Å–æ —Å–∫–∏–¥–∫–æ–π"""
    if not has_discount or discount == 0:
        return f"{original_price:,} ‚ÇΩ".replace(",", " ")
    
    if discounted_price == 0:
        return f"~~{original_price:,} ‚ÇΩ~~ **–ë–ï–°–ü–õ–ê–¢–ù–û** üéâ".replace(",", " ")
    
    return f"~~{original_price:,} ‚ÇΩ~~ **{discounted_price:,} ‚ÇΩ** (-{discount} ‚ÇΩ)".replace(",", " ")

@router.callback_query(F.data == "subscribe")
async def subscribe_handler(callback: CallbackQuery):
    """–í—ã–±–æ—Ä —Ç–∞—Ä–∏—Ñ–∞ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ —Å –ø—Ä–æ–º–æ –∞–∫—Ü–∏–µ–π –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏"""
    user_id = callback.from_user.id
    update_user_activity(user_id)
    
    image_path = IMAGES["tariffs"]
    
    # –ù–ï —É–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å –ø—Ä–æ–º–æ –∏–ª–∏ –±–µ–∑ (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
    text = TEXTS['tariffs_intro']
    
    if os.path.exists(image_path):
        photo = FSInputFile(image_path)
        await callback.message.answer_photo(
            photo,
            caption=text,
            reply_markup=get_tariffs_menu(user_id)
        )
    else:
        await answer_split_text(
            callback.message,
            text, 
            reply_markup=get_tariffs_menu(user_id)
        )
    
    try:
        await callback.answer()
    except Exception:
        pass

@router.callback_query(F.data == "tariff_basic")
async def tariff_basic_handler(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑ –±–∞–∑–æ–≤–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞"""
    user_id = callback.from_user.id
    update_user_activity(user_id)
    
    text = TEXTS['tariff_basic']
    image_path = IMAGES["tariffs"]
    
    # –ù–ï —É–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
    
    if os.path.exists(image_path):
        photo = FSInputFile(image_path)
        await callback.message.answer_photo(
            photo,
            caption=text,
            reply_markup=get_tariff_confirm_menu("basic", user_id)
        )
    else:
        await answer_split_text(
            callback.message,
            text, 
            reply_markup=get_tariff_confirm_menu("basic", user_id)
        )
    
    try:
        await callback.answer()
    except Exception:
        pass

@router.callback_query(F.data == "tariff_vip")
async def tariff_vip_handler(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑ VIP —Ç–∞—Ä–∏—Ñ–∞"""
    user_id = callback.from_user.id
    update_user_activity(user_id)
    
    text = TEXTS['tariff_vip']
    image_path = IMAGES["tariffs"]
    
    # –ù–ï —É–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
    
    if os.path.exists(image_path):
        photo = FSInputFile(image_path)
        await callback.message.answer_photo(
            photo,
            caption=text,
            reply_markup=get_tariff_confirm_menu("vip", user_id)
        )
    else:
        await answer_split_text(
            callback.message,
            text, 
            reply_markup=get_tariff_confirm_menu("vip", user_id)
        )
    
    try:
        await callback.answer()
    except Exception:
        pass