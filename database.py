import sqlite3
import asyncio
from datetime import datetime
from typing import Optional

# –ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
DB_PATH = "bot_database.db"

class Database:
    def __init__(self):
        self.db_path = DB_PATH
        self.init_db()
    
    def init_db(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∞–≤—Ç–æ—Å–ø–∞–º–∞
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS auto_spam_history (
                user_id INTEGER PRIMARY KEY,
                spam_completed BOOLEAN DEFAULT FALSE,
                spam_date TIMESTAMP,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è UTM –º–µ—Ç–æ–∫ (–Ω–∞ –±—É–¥—É—â–µ–µ)
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS user_utm (
                user_id INTEGER PRIMARY KEY,
                utm_source TEXT,
                utm_medium TEXT,
                utm_campaign TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        conn.commit()
        conn.close()
        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    
    def is_spam_completed(self, user_id: int) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –±—ã–ª –ª–∏ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–≤—Ç–æ—Å–ø–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            bool: True –µ—Å–ª–∏ —Å–ø–∞–º —É–∂–µ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω
        """
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        cursor.execute(
            "SELECT spam_completed FROM auto_spam_history WHERE user_id = ?",
            (user_id,)
        )
        result = cursor.fetchone()
        conn.close()
        
        if result:
            return bool(result[0])
        return False
    
    def mark_spam_completed(self, user_id: int):
        """
        –û—Ç–º–µ—á–∞–µ—Ç, —á—Ç–æ –∞–≤—Ç–æ—Å–ø–∞–º –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        current_time = datetime.now().isoformat()
        
        cursor.execute('''
            INSERT OR REPLACE INTO auto_spam_history 
            (user_id, spam_completed, spam_date)
            VALUES (?, ?, ?)
        ''', (user_id, True, current_time))
        
        conn.commit()
        conn.close()
        print(f"üíæ –ê–≤—Ç–æ—Å–ø–∞–º –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    def reset_spam_status(self, user_id: int):
        """
        –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ—Å–ø–∞–º–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        cursor.execute(
            "UPDATE auto_spam_history SET spam_completed = FALSE WHERE user_id = ?",
            (user_id,)
        )
        
        conn.commit()
        conn.close()
        print(f"üîÑ –°—Ç–∞—Ç—É—Å –∞–≤—Ç–æ—Å–ø–∞–º–∞ —Å–±—Ä–æ—à–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    def get_spam_stats(self) -> dict:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∞–≤—Ç–æ—Å–ø–∞–º—É
        
        Returns:
            dict: —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        """
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –ø–æ–ª—É—á–∏–≤—à–∏—Ö —Å–ø–∞–º
        cursor.execute("SELECT COUNT(*) FROM auto_spam_history WHERE spam_completed = TRUE")
        completed_count = cursor.fetchone()[0]
        
        # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ
        cursor.execute("SELECT COUNT(*) FROM auto_spam_history")
        total_count = cursor.fetchone()[0]
        
        conn.close()
        
        return {
            "spam_completed": completed_count,
            "total_users": total_count,
            "spam_pending": total_count - completed_count
        }
    
    def save_user_utm(self, user_id: int, utm_data: dict):
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç UTM –º–µ—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            utm_data: —Å–ª–æ–≤–∞—Ä—å —Å UTM –º–µ—Ç–∫–∞–º–∏
        """
        if not utm_data:
            return
        
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        current_time = datetime.now().isoformat()
        
        cursor.execute('''
            INSERT OR REPLACE INTO user_utm 
            (user_id, utm_source, utm_medium, utm_campaign, updated_at)
            VALUES (?, ?, ?, ?, ?)
        ''', (
            user_id,
            utm_data.get('utm_source', ''),
            utm_data.get('utm_medium', ''),
            utm_data.get('utm_campaign', ''),
            current_time
        ))
        
        conn.commit()
        conn.close()
        print(f"üíæ UTM –º–µ—Ç–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ë–î –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    def get_user_utm(self, user_id: int) -> dict:
        """
        –ü–æ–ª—É—á–∞–µ—Ç UTM –º–µ—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            dict: UTM –º–µ—Ç–∫–∏
        """
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        cursor.execute(
            "SELECT utm_source, utm_medium, utm_campaign FROM user_utm WHERE user_id = ?",
            (user_id,)
        )
        result = cursor.fetchone()
        conn.close()
        
        if result:
            return {
                'utm_source': result[0] or '',
                'utm_medium': result[1] or '',
                'utm_campaign': result[2] or ''
            }
        return {}

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db = Database()