#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü file_id –∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
–ó–∞–ø—É—Å—Ç–∏—Ç—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ: python3 migrate_database.py
"""

import sqlite3
import logging
from datetime import datetime

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def migrate_database():
    """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–µ —Ç–∞–±–ª–∏—Ü—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    
    conn = sqlite3.connect('bot_database.db')
    cursor = conn.cursor()
    
    try:
        # 1. –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è file_id –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS media_file_ids (
                file_path TEXT PRIMARY KEY,
                file_id TEXT NOT NULL,
                file_type TEXT NOT NULL,
                file_size INTEGER,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                last_used TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        logger.info("‚úÖ –¢–∞–±–ª–∏—Ü–∞ media_file_ids —Å–æ–∑–¥–∞–Ω–∞")
        
        # 2. –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS blocked_users (
                user_id INTEGER PRIMARY KEY,
                blocked_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                reason TEXT
            )
        ''')
        logger.info("‚úÖ –¢–∞–±–ª–∏—Ü–∞ blocked_users —Å–æ–∑–¥–∞–Ω–∞")
        
        # 3. –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ç—Ä–∞—Ñ–∏–∫–∞
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS traffic_log (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                operation TEXT NOT NULL,
                user_id INTEGER,
                data_type TEXT,
                data_size INTEGER,
                file_path TEXT,
                status TEXT,
                error_message TEXT
            )
        ''')
        logger.info("‚úÖ –¢–∞–±–ª–∏—Ü–∞ traffic_log —Å–æ–∑–¥–∞–Ω–∞")
        
        # 4. –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è —Å—É—Ç–æ—á–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS daily_stats (
                date DATE PRIMARY KEY,
                total_messages INTEGER DEFAULT 0,
                total_media_sent INTEGER DEFAULT 0,
                total_bytes_sent INTEGER DEFAULT 0,
                openai_requests INTEGER DEFAULT 0,
                openai_bytes INTEGER DEFAULT 0,
                blocked_users_count INTEGER DEFAULT 0,
                new_users INTEGER DEFAULT 0,
                active_users INTEGER DEFAULT 0
            )
        ''')
        logger.info("‚úÖ –¢–∞–±–ª–∏—Ü–∞ daily_stats —Å–æ–∑–¥–∞–Ω–∞")
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
        cursor.execute('CREATE INDEX IF NOT EXISTS idx_traffic_timestamp ON traffic_log(timestamp)')
        cursor.execute('CREATE INDEX IF NOT EXISTS idx_traffic_user ON traffic_log(user_id)')
        cursor.execute('CREATE INDEX IF NOT EXISTS idx_media_file_id ON media_file_ids(file_id)')
        
        conn.commit()
        logger.info("‚úÖ –í—Å–µ –º–∏–≥—Ä–∞—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table'")
        tables = cursor.fetchall()
        logger.info(f"üìä –¢–µ–∫—É—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã –≤ –ë–î: {[t[0] for t in tables]}")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
        conn.rollback()
        raise
    finally:
        conn.close()

if __name__ == "__main__":
    migrate_database()
    print("\n‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –¢–µ–ø–µ—Ä—å –∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ —Å –Ω–æ–≤—ã–º –∫–æ–¥–æ–º.")