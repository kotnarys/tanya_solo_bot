import asyncio
import logging
from datetime import datetime, time
import pytz
from core.database import db

logger = logging.getLogger(__name__)

async def daily_thread_reset_task():
    """
    –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ —Å–±—Ä–æ—Å–∞ OpenAI threads –≤ 00:00 –ø–æ –º–æ—Å–∫–æ–≤—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏
    """
    moscow_tz = pytz.timezone('Europe/Moscow')
    
    logger.info("üîÑ –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ —Å–±—Ä–æ—Å–∞ threads –∑–∞–ø—É—â–µ–Ω–∞")
    
    while True:
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –ú–æ—Å–∫–≤–µ
            now_moscow = datetime.now(moscow_tz)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–±—Ä–æ—Å–∞ (00:00)
            from datetime import timedelta
            
            next_reset_time = now_moscow.replace(
                hour=0, minute=0, second=0, microsecond=0
            )
            
            # –ï—Å–ª–∏ —É–∂–µ –ø—Ä–æ—à–ª–æ 00:00 —Å–µ–≥–æ–¥–Ω—è, –ø–ª–∞–Ω–∏—Ä—É–µ–º –Ω–∞ –∑–∞–≤—Ç—Ä–∞
            if now_moscow.time() >= time(0, 1):  # –ï—Å–ª–∏ –ø—Ä–æ—à–ª–∞ –º–∏–Ω—É—Ç–∞ –ø–æ—Å–ª–µ –ø–æ–ª—É–Ω–æ—á–∏
                next_reset_time = next_reset_time + timedelta(days=1)
            
            # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–±—Ä–æ—Å–∞
            wait_seconds = (next_reset_time - now_moscow).total_seconds()
            
            logger.info(f"‚è∞ –°–ª–µ–¥—É—é—â–∏–π —Å–±—Ä–æ—Å threads –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –Ω–∞ {next_reset_time.strftime('%Y-%m-%d %H:%M:%S %Z')} (—á–µ—Ä–µ–∑ {wait_seconds/3600:.1f} —á–∞—Å–æ–≤)")
            
            # –ñ–¥–µ–º –¥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–±—Ä–æ—Å–∞
            await asyncio.sleep(wait_seconds)
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π —Å–±—Ä–æ—Å
            logger.info("üîÑ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π —Å–±—Ä–æ—Å OpenAI threads...")
            deleted_count = db.reset_all_threads_daily()
            
            if deleted_count > 0:
                logger.info(f"‚úÖ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π —Å–±—Ä–æ—Å –∑–∞–≤–µ—Ä—à–µ–Ω: —É–¥–∞–ª–µ–Ω–æ {deleted_count} threads")
            else:
                logger.info("‚úÖ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π —Å–±—Ä–æ—Å –∑–∞–≤–µ—Ä—à–µ–Ω: –Ω–µ—Ç threads –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ —Å–±—Ä–æ—Å–∞ threads: {e}")
            # –ü—Ä–∏ –æ—à–∏–±–∫–µ –∂–¥–µ–º —á–∞—Å –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
            await asyncio.sleep(3600)

def get_next_reset_time():
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–±—Ä–æ—Å–∞ threads –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–º –≤—Ä–µ–º–µ–Ω–∏
    """
    moscow_tz = pytz.timezone('Europe/Moscow')
    now_moscow = datetime.now(moscow_tz)
    
    # –°–ª–µ–¥—É—é—â–∏–π —Å–±—Ä–æ—Å –≤ 00:00
    if now_moscow.time() < time(0, 1):  # –ï—Å–ª–∏ –µ—â–µ –Ω–µ –ø—Ä–æ—à–ª–∞ –º–∏–Ω—É—Ç–∞ –ø–æ—Å–ª–µ –ø–æ–ª—É–Ω–æ—á–∏
        next_reset = now_moscow.replace(hour=0, minute=0, second=0, microsecond=0)
    else:
        # –°–±—Ä–æ—Å –∑–∞–≤—Ç—Ä–∞ –≤ 00:00
        tomorrow = now_moscow.replace(hour=0, minute=0, second=0, microsecond=0)
        from datetime import timedelta
        next_reset = tomorrow + timedelta(days=1)
    
    return next_reset