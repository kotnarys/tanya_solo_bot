import asyncio
import os
from datetime import datetime, timedelta
from aiogram import Bot
from aiogram.types import FSInputFile, InputMediaPhoto
from aiogram.exceptions import TelegramForbiddenError, TelegramBadRequest
from keyboards.inline import get_avatar_info_menu, get_helps_menu, get_reviews_menu, get_tariffs_menu
from core.config import TEXTS, IMAGES, REVIEWS_IMAGES
from core.database import db
from utils.message_utils import send_split_message
import logging

logger = logging.getLogger(__name__)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_last_activity = {}

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∫–∞–∫–æ–π —ç—Ç–∞–ø –∞–≤—Ç–æ—Å–ø–∞–º–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
# 0 - –Ω–µ –Ω–∞—á–∞—Ç, 1 - "2 super novosti", 2 - "—á—Ç–æ —Ç–∞–∫–æ–µ –∞–≤–∞—Ç–∞—Ä", 3 - "—Å —á–µ–º –ø–æ–º–æ–≥–∞–µ—Ç", 4 - "–æ—Ç–∑—ã–≤—ã", 5 - "—Ç–∞—Ä–∏—Ñ—ã" (–∑–∞–≤–µ—Ä—à–µ–Ω)
user_spam_stage = {}

def update_user_activity(user_id: int):
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –û–¢–ö–õ–Æ–ß–ê–ï–¢ –∞–≤—Ç–æ—Å–ø–∞–º –Ω–∞–≤—Å–µ–≥–¥–∞
    
    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    current_time = datetime.now()
    user_last_activity[user_id] = current_time
    
    # –ù–ê–í–°–ï–ì–î–ê –æ—Ç–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ—Å–ø–∞–º –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    db.mark_spam_completed(user_id)

def update_user_activity_start_only(user_id: int):
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –¢–û–õ–¨–ö–û –¥–ª—è /start (–Ω–µ –æ—Ç–∫–ª—é—á–∞–µ—Ç –∞–≤—Ç–æ—Å–ø–∞–º)
    
    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    current_time = datetime.now()
    user_last_activity[user_id] = current_time
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —ç—Ç–∞–ø –∞–≤—Ç–æ—Å–ø–∞–º–∞ –Ω–∞ 0, –Ω–æ –ù–ï –æ—Ç–∫–ª—é—á–∞–µ–º –≤ –ë–î
    user_spam_stage[user_id] = 0

async def send_video_with_cache(bot: Bot, user_id: int, video_path: str) -> bool:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤–∏–¥–µ–æ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫—ç—à–∞ file_id
    """
    try:
        file_size = os.path.getsize(video_path)
        max_size = 50 * 1024 * 1024  # 50 –ú–ë
        
        if file_size > max_size:
            logger.warning(f"–í–∏–¥–µ–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ: {file_size / 1024 / 1024:.1f} –ú–ë")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π file_id
        cached_file_id = db.get_media_file_id(video_path)
        
        if cached_file_id:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π file_id
            await bot.send_video_note(user_id, cached_file_id, request_timeout=30)
            db.log_traffic("auto_spam_video_cached", user_id, "video_note", 100, video_path)
            db.update_daily_stats(total_media_sent=1, total_bytes_sent=100)
            logger.info(f"–í–∏–¥–µ–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ file_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        else:
            # –ü–µ—Ä–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ - –∑–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª
            video = FSInputFile(video_path)
            message = await bot.send_video_note(user_id, video, request_timeout=120)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º file_id
            if message.video_note:
                db.save_media_file_id(video_path, message.video_note.file_id, "video_note", file_size)
                logger.info(f"–í–∏–¥–µ–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏ file_id —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è {video_path}")
            
            db.log_traffic("auto_spam_video_upload", user_id, "video_note", file_size, video_path)
            db.update_daily_stats(total_media_sent=1, total_bytes_sent=file_size)
        
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∏–¥–µ–æ: {e}")
        return False

async def send_photo_with_cache(bot: Bot, user_id: int, image_path: str, caption: str = None, reply_markup=None) -> bool:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–æ—Ç–æ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫—ç—à–∞ file_id
    """
    try:
        file_size = os.path.getsize(image_path)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π file_id
        cached_file_id = db.get_media_file_id(image_path)
        
        if cached_file_id:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π file_id
            await bot.send_photo(user_id, cached_file_id, caption=caption, reply_markup=reply_markup)
            db.log_traffic("auto_spam_photo_cached", user_id, "photo", 100, image_path)
            db.update_daily_stats(total_media_sent=1, total_bytes_sent=100)
            logger.info(f"–§–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ file_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        else:
            # –ü–µ—Ä–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ - –∑–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª
            photo = FSInputFile(image_path)
            message = await bot.send_photo(user_id, photo, caption=caption, reply_markup=reply_markup)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º file_id
            if message.photo:
                db.save_media_file_id(image_path, message.photo[-1].file_id, "photo", file_size)
                logger.info(f"–§–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏ file_id —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è {image_path}")
            
            db.log_traffic("auto_spam_photo_upload", user_id, "photo", file_size, image_path)
            db.update_daily_stats(total_media_sent=1, total_bytes_sent=file_size)
        
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: {e}")
        return False

async def send_next_spam_message(bot: Bot, user_id: int, stage: int):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–≤—Ç–æ—Å–ø–∞–º–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —ç—Ç–∞–ø–∞
    
    Args:
        bot: —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è  
        stage: —ç—Ç–∞–ø –∞–≤—Ç–æ—Å–ø–∞–º–∞ (1-5)
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–æ—Ç–∞
        if db.is_user_blocked(user_id):
            logger.debug(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ—Å–ø–∞–º")
            return
        
        if stage == 1:
            # 1. 2 Super Novosti - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ –∫—Ä—É–∂–æ–∫ –∏ —Ç–µ–∫—Å—Ç
            try:
                # –ß–∏—Ç–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ —Ñ–∞–π–ª–∞
                text_path = "media/video/2_super_novosti.txt"
                if os.path.exists(text_path):
                    with open(text_path, 'r', encoding='utf-8') as f:
                        text_content = f.read().strip()
                else:
                    text_content = "üòç 2 —Å—É–ø–µ—Ä –Ω–æ–≤–æ—Å—Ç–∏"
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ –∫—Ä—É–∂–æ–∫
                video_path = "media/video/2_super_novosti.mp4"
                if os.path.exists(video_path):
                    await send_video_with_cache(bot, user_id, video_path)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–¥–µ–ª—å–Ω–æ
                await send_split_message(bot, text_content, user_id)
                db.log_traffic("auto_spam_text", user_id, "text", len(text_content.encode('utf-8')), "2_super_novosti")
                db.update_daily_stats(total_messages=1)
                    
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ 2 super novosti: {e}")
                # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–π —Ç–µ–∫—Å—Ç
                await send_split_message(bot, "üòç 2 —Å—É–ø–µ—Ä –Ω–æ–≤–æ—Å—Ç–∏", user_id)
            
        elif stage == 2:
            # 2. –ß—Ç–æ —Ç–∞–∫–æ–µ –æ–Ω–ª–∞–π–Ω-–∞–≤–∞—Ç–∞—Ä
            image_path = IMAGES["what_is_avatar"]
            
            if os.path.exists(image_path):
                await send_photo_with_cache(
                    bot, user_id, image_path,
                    caption=TEXTS["what_is_avatar"],
                    reply_markup=get_avatar_info_menu()
                )
            else:
                await send_split_message(
                    bot,
                    TEXTS["what_is_avatar"],
                    user_id,
                    reply_markup=get_avatar_info_menu()
                )
            db.update_daily_stats(total_messages=1)
            
        elif stage == 3:
            # 3. –° —á–µ–º –ø–æ–º–æ–≥–∞–µ—Ç
            image_path = IMAGES["what_helps"]
            
            if os.path.exists(image_path):
                await send_photo_with_cache(
                    bot, user_id, image_path,
                    caption=TEXTS["what_helps"],
                    reply_markup=get_helps_menu()
                )
            else:
                await send_split_message(
                    bot,
                    TEXTS["what_helps"],
                    user_id,
                    reply_markup=get_helps_menu()
                )
            db.update_daily_stats(total_messages=1)
            
        elif stage == 4:
            # 4. –û—Ç–∑—ã–≤—ã
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–æ–≤
            await send_split_message(
                bot,
                TEXTS["reviews"],
                user_id,
                reply_markup=get_reviews_menu()
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –æ—Ç–∑—ã–≤–æ–≤ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
            media_group = []
            total_size = 0
            
            for image_path in REVIEWS_IMAGES:
                if os.path.exists(image_path):
                    try:
                        file_size = os.path.getsize(image_path)
                        max_size = 10 * 1024 * 1024  # 10 –ú–ë
                        
                        if file_size <= max_size:
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
                            cached_file_id = db.get_media_file_id(image_path)
                            
                            if cached_file_id:
                                media_group.append(InputMediaPhoto(media=cached_file_id))
                                total_size += 100  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ
                            else:
                                photo = FSInputFile(image_path)
                                media_group.append(InputMediaPhoto(media=photo))
                                total_size += file_size
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ –æ—Ç–∑—ã–≤–∞ {image_path}: {e}")
            
            if media_group:
                # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –≥—Ä—É–ø–ø—ã –ø–æ 10 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
                chunk_size = 10
                for i in range(0, len(media_group), chunk_size):
                    chunk = media_group[i:i + chunk_size]
                    messages = await bot.send_media_group(user_id, chunk)
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º file_id –¥–ª—è –Ω–æ–≤—ã—Ö —Ñ–æ—Ç–æ
                    for j, msg in enumerate(messages):
                        if msg.photo and i + j < len(REVIEWS_IMAGES):
                            img_path = REVIEWS_IMAGES[i + j]
                            if not db.get_media_file_id(img_path):
                                db.save_media_file_id(img_path, msg.photo[-1].file_id, "photo", 
                                                    os.path.getsize(img_path))
                    
                    if i + chunk_size < len(media_group):
                        await asyncio.sleep(0.5)
                
                db.log_traffic("auto_spam_reviews", user_id, "media_group", total_size, "reviews")
                db.update_daily_stats(total_media_sent=len(media_group), total_bytes_sent=total_size)
            
            db.update_daily_stats(total_messages=1)
            
        elif stage == 5:
            # 5. –¢–∞—Ä–∏—Ñ—ã - —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            image_path = IMAGES["tariffs"]
            text = TEXTS['tariffs_intro']
            
            if os.path.exists(image_path):
                await send_photo_with_cache(
                    bot, user_id, image_path,
                    caption=text,
                    reply_markup=get_tariffs_menu(user_id)
                )
            else:
                await send_split_message(
                    bot,
                    text,
                    user_id,
                    reply_markup=get_tariffs_menu(user_id)
                )
            
            db.update_daily_stats(total_messages=1)
            
            # –û—Ç–º–µ—á–∞–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, —á—Ç–æ —Å–ø–∞–º –∑–∞–≤–µ—Ä—à–µ–Ω
            db.mark_spam_completed(user_id)
            
    except TelegramForbiddenError:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞
        db.mark_user_blocked(user_id, "Bot blocked during auto spam")
        db.update_daily_stats(blocked_users_count=1)
        logger.debug(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞ –≤–æ –≤—Ä–µ–º—è –∞–≤—Ç–æ—Å–ø–∞–º–∞")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–≤—Ç–æ—Å–ø–∞–º–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}, —ç—Ç–∞–ø {stage}: {e}")
        db.log_traffic("auto_spam_error", user_id, "error", 0, None, "error", str(e))

async def start_auto_spam_task(bot: Bot):
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–≤—Ç–æ—Å–æ–æ–±—â–µ–Ω–∏–π
    
    Args:
        bot: —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
    """
    while True:
        try:
            current_time = datetime.now()
            
            # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é —Å–ª–æ–≤–∞—Ä—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
            if user_last_activity:
                # –ö–æ–ø–∏—Ä—É–µ–º —Å–ª–æ–≤–∞—Ä—å, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å "dictionary changed size during iteration"
                users_snapshot = dict(user_last_activity)
                
                for user_id, last_activity in users_snapshot.items():
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–æ—Ç–∞
                    if db.is_user_blocked(user_id):
                        continue
                    
                    time_diff = current_time - last_activity
                    minutes_since_activity = int(time_diff.total_seconds() // 60)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ —É–∂–µ –ü–û–õ–ù–û–°–¢–¨–Æ –∑–∞–≤–µ—Ä—à–µ–Ω/–æ—Ç–∫–ª—é—á–µ–Ω —Å–ø–∞–º –≤ –ë–î
                    if db.is_spam_completed(user_id):
                        continue
                    
                    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —ç—Ç–∞–ø —Å–ø–∞–º–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    current_stage = user_spam_stage.get(user_id, 0)
                    
                    # –ö–∞–∂–¥—ã–π —á–∞—Å –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ = —Å–ª–µ–¥—É—é—â–∏–π —ç—Ç–∞–ø (–∫—Ä–æ–º–µ –ø–µ—Ä–≤–æ–≥–æ - —á–µ—Ä–µ–∑ —á–∞—Å)
                    if minutes_since_activity >= 60 and current_stage == 0:
                        needed_stage = 1  # 2 super novosti —á–µ—Ä–µ–∑ —á–∞—Å
                    elif minutes_since_activity >= 120 and current_stage <= 1:
                        needed_stage = 2  # —á—Ç–æ —Ç–∞–∫–æ–µ –∞–≤–∞—Ç–∞—Ä —á–µ—Ä–µ–∑ 2 —á–∞—Å–∞
                    elif minutes_since_activity >= 180 and current_stage <= 2:
                        needed_stage = 3  # —Å —á–µ–º –ø–æ–º–æ–≥–∞–µ—Ç —á–µ—Ä–µ–∑ 3 —á–∞—Å–∞
                    elif minutes_since_activity >= 240 and current_stage <= 3:
                        needed_stage = 4  # –æ—Ç–∑—ã–≤—ã —á–µ—Ä–µ–∑ 4 —á–∞—Å–∞
                    elif minutes_since_activity >= 300 and current_stage <= 4:
                        needed_stage = 5  # —Ç–∞—Ä–∏—Ñ—ã —á–µ—Ä–µ–∑ 5 —á–∞—Å–æ–≤
                    else:
                        needed_stage = current_stage
                    
                    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–æ–ª–≥–æ –∏ –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–π —ç—Ç–∞–ø
                    if needed_stage > current_stage and needed_stage <= 5:
                        await send_next_spam_message(bot, user_id, needed_stage)
                        user_spam_stage[user_id] = needed_stage
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –∞–≤—Ç–æ—Å–ø–∞–º –∑–∞–¥–∞—á–µ: {e}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
        await asyncio.sleep(10)