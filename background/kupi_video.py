import os
import asyncio
import logging
from datetime import datetime, timezone, timedelta
from aiogram import Bot
from aiogram.types import FSInputFile
from aiogram.exceptions import TelegramBadRequest, TelegramForbiddenError
from core.database import db
from keyboards.inline import get_kupi_video_menu
from utils.message_utils import send_split_message

logger = logging.getLogger(__name__)

def get_kupi_content():
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ –≤–∏–¥–µ–æ –∏ —Ç–µ–∫—Å—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã
    
    Returns:
        tuple: (video_path, text_content)
    """
    # –ú–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è
    moscow_tz = timezone(timedelta(hours=3))
    now = datetime.now(moscow_tz)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–∏–µ —Ñ–∞–π–ª—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
    if now.date() < datetime(2025, 7, 30).date():
        # –î–æ 30.07.2025 - –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã
        video_path = "media/video/kupi.mp4"
        text_content = """üéÅ <b>–¢–û–õ–¨–ö–û –°–ï–ì–û–î–ù–Ø –¥–æ 23:59 –ø–æ –º—Å–∫ –ü–û–î–ê–†–û–ö:</b>

üí´ 8D-–ø—Ä–∞–∫—Ç–∏–∫–∞ ¬´–ù–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —ç–Ω–µ—Ä–≥–∏–µ–π –∫–æ—Å–º–æ—Å–∞¬ª (<s>7000‚ÇΩ</s>)

–ê –µ—â–µ <b>—Å–∞–º–∞—è –Ω–∏–∑–∫–∞—è —Ü–µ–Ω–∞</b> –Ω–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ò–ò –¢–∞–Ω–µ –°–æ–ª–æ –Ω–∞ <b>—Ü–µ–ª—ã–π –º–µ—Å—è—Ü!</b>

‚è∞ <b>–£—Å–ø–µ–≤–∞–π</b>, —á—Ç–æ–±—ã –Ω–µ —É–ø—É—Å—Ç–∏—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å, –Ω–∞–∂–∏–º–∞–π ¬´<b>–í—ã–±—Ä–∞—Ç—å –¢–∞—Ä–∏—Ñ</b>¬ª

–ê –µ—Å–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å, –≤—ã–±–µ—Ä–∏ –∫–Ω–æ–ø–∫—É ¬´<b>–°–ª—É–∂–±–∞ –ó–∞–±–æ—Ç—ã</b>"""
    elif now.date() == datetime(2025, 7, 30).date():
        # 30.07.2025 - –∏—Å–ø–æ–ª—å–∑—É–µ–º kupi1
        video_path = "media/video/kupi1.mp4"
        text_content = load_text_from_file("media/video/kupi1.txt")
    else:
        # 31.07.2025 –∏ –¥–∞–ª–µ–µ - –∏—Å–ø–æ–ª—å–∑—É–µ–º kupi2
        video_path = "media/video/kupi2.mp4"
        text_content = load_text_from_file("media/video/kupi2.txt")
    
    return video_path, text_content

def reset_kupi_history_if_needed():
    """
    –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫—É–ø–∏-–≤–∏–¥–µ–æ –¥–ª—è –Ω–æ–≤—ã—Ö –¥–∞—Ç (30.07 –∏ 31.07)
    —á—Ç–æ–±—ã –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –æ—Ç–ø—Ä–∞–≤–∏–ª–æ—Å—å –∑–∞–Ω–æ–≤–æ
    """
    moscow_tz = timezone(timedelta(hours=3))
    now = datetime.now(moscow_tz)
    current_date = now.date()
    
    # –î–∞—Ç—ã, –∫–æ–≥–¥–∞ –Ω—É–∂–Ω–æ —Å–±—Ä–æ—Å–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é
    reset_dates = [
        datetime(2025, 7, 30).date(),  # 30.07.2025
        datetime(2025, 7, 31).date()   # 31.07.2025
    ]
    
    if current_date in reset_dates:
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ —É–∂–µ —Å–±—Ä–æ—Å —Å–µ–≥–æ–¥–Ω—è
            reset_key = f"kupi_reset_{current_date.strftime('%Y-%m-%d')}"
            
            # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ —Ñ–∞–π–ª-–º–∞—Ä–∫–µ—Ä
            reset_marker_file = f"media/video/{reset_key}.marker"
            
            if not os.path.exists(reset_marker_file):
                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫—É–ø–∏-–≤–∏–¥–µ–æ
                db.reset_kupi_video_history()
                
                # –°–æ–∑–¥–∞–µ–º –º–∞—Ä–∫–µ—Ä, —á—Ç–æ —Å–±—Ä–æ—Å —É–∂–µ –±—ã–ª —Å–µ–≥–æ–¥–Ω—è
                with open(reset_marker_file, 'w') as f:
                    f.write(f"Reset done at {now.isoformat()}")
                
                logger.info(f"–ò—Å—Ç–æ—Ä–∏—è –∫—É–ø–∏-–≤–∏–¥–µ–æ —Å–±—Ä–æ—à–µ–Ω–∞ –¥–ª—è –¥–∞—Ç—ã {current_date}")
            else:
                logger.debug(f"–ò—Å—Ç–æ—Ä–∏—è –∫—É–ø–∏-–≤–∏–¥–µ–æ —É–∂–µ –±—ã–ª–∞ —Å–±—Ä–æ—à–µ–Ω–∞ –¥–ª—è –¥–∞—Ç—ã {current_date}")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∫—É–ø–∏-–≤–∏–¥–µ–æ: {e}")

def load_text_from_file(file_path):
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ —Ñ–∞–π–ª–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π
    
    Args:
        file_path: –ø—É—Ç—å –∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–º—É —Ñ–∞–π–ª—É
        
    Returns:
        str: —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ –∏–ª–∏ —Ä–µ–∑–µ—Ä–≤–Ω—ã–π —Ç–µ–∫—Å—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ
    """
    try:
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º UTF-8
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                return f.read().strip()
        except UnicodeDecodeError:
            # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è, –ø—Ä–æ–±—É–µ–º UTF-16
            with open(file_path, 'r', encoding='utf-16') as f:
                return f.read().strip()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ–∫—Å—Ç–∞ –∏–∑ {file_path}: {e}")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–π —Ç–µ–∫—Å—Ç
        return """üéÅ <b>–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ!</b>

–í—ã–±–∏—Ä–∞–π —Ç–∞—Ä–∏—Ñ –∏–ª–∏ –ø–∏—à–∏ –≤ –°–ª—É–∂–±—É –ó–∞–±–æ—Ç—ã, –µ—Å–ª–∏ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã üëáüèª"""

async def send_kupi_video_to_user(bot: Bot, user_id: int) -> bool:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫—É–ø–∏-–≤–∏–¥–µ–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    
    Args:
        bot: —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
    Returns:
        bool: True –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–æ—Ç–∞
        if db.is_user_blocked(user_id):
            logger.debug(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
            return False
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –ø—É—Ç–∏ –∏ —Ç–µ–∫—Å—Ç
        video_path, text_content = get_kupi_content()
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ–∫—Ä—É–∂–æ–∫, –µ—Å–ª–∏ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if os.path.exists(video_path):
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
                file_size = os.path.getsize(video_path)
                max_size = 50 * 1024 * 1024  # 50 –ú–ë
                
                if file_size <= max_size:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ file_id –≤ –∫—ç—à–µ
                    cached_file_id = db.get_media_file_id(video_path)
                    
                    if cached_file_id:
                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π file_id
                        try:
                            await bot.send_video_note(user_id, cached_file_id, request_timeout=30)
                            logger.info(f"–ö—É–ø–∏-–≤–∏–¥–µ–æ–∫—Ä—É–∂–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —á–µ—Ä–µ–∑ file_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                            db.log_traffic("kupi_video_cached", user_id, "video_note", 100, video_path)
                            db.update_daily_stats(total_media_sent=1, total_bytes_sent=100)
                        except Exception as e:
                            if "VOICE_MESSAGES_FORBIDDEN" in str(e):
                                await bot.send_video(user_id, cached_file_id, request_timeout=30)
                                logger.info(f"–ö—É–ø–∏-–≤–∏–¥–µ–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–∞–∫ –æ–±—ã—á–Ω–æ–µ –≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ file_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                                db.log_traffic("kupi_video_cached", user_id, "video", 100, video_path)
                            else:
                                raise e
                    else:
                        # –ü–µ—Ä–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ - –∑–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º file_id
                        video = FSInputFile(video_path)
                        
                        try:
                            message = await bot.send_video_note(user_id, video, request_timeout=120)
                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º file_id –¥–ª—è –±—É–¥—É—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
                            if message.video_note:
                                db.save_media_file_id(video_path, message.video_note.file_id, "video_note", file_size)
                                logger.info(f"–ö—É–ø–∏-–≤–∏–¥–µ–æ–∫—Ä—É–∂–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∏ file_id —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è {video_path}")
                            db.log_traffic("kupi_video_upload", user_id, "video_note", file_size, video_path)
                            db.update_daily_stats(total_media_sent=1, total_bytes_sent=file_size)
                        except Exception as e:
                            if "VOICE_MESSAGES_FORBIDDEN" in str(e):
                                video = FSInputFile(video_path)
                                message = await bot.send_video(user_id, video, request_timeout=120)
                                # –°–æ—Ö—Ä–∞–Ω—è–µ–º file_id
                                if message.video:
                                    db.save_media_file_id(video_path, message.video.file_id, "video", file_size)
                                logger.info(f"–ö—É–ø–∏-–≤–∏–¥–µ–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–∞–∫ –æ–±—ã—á–Ω–æ–µ –≤–∏–¥–µ–æ –∏ file_id —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
                                db.log_traffic("kupi_video_upload", user_id, "video", file_size, video_path)
                                db.update_daily_stats(total_media_sent=1, total_bytes_sent=file_size)
                            else:
                                raise e
                    
                    # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Ç–µ–∫—Å—Ç–∞
                    await asyncio.sleep(1)
                else:
                    logger.warning(f"–ö—É–ø–∏-–≤–∏–¥–µ–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ: {file_size / 1024 / 1024:.1f} –ú–ë (–º–∞–∫—Å–∏–º—É–º 50 –ú–ë)")
            except TelegramForbiddenError:
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞
                db.mark_user_blocked(user_id, "Bot blocked by user")
                logger.debug(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞, –¥–æ–±–∞–≤–ª–µ–Ω –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫")
                return False
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –≤–∏–¥–µ–æ —Ñ–∞–π–ª–æ–º: {e}")
        else:
            logger.info(f"–ö—É–ø–∏-–≤–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: {video_path}, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å –∫–Ω–æ–ø–∫–∞–º–∏
        await send_split_message(
            bot,
            text_content,
            user_id,
            reply_markup=get_kupi_video_menu()
        )
        
        # –û—Ç–º–µ—á–∞–µ–º –≤ –ë–î —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
        db.mark_kupi_video_sent(user_id, video_path if os.path.exists(video_path) else "text_only")
        db.log_traffic("kupi_text", user_id, "text", len(text_content.encode('utf-8')), "text_only")
        db.update_daily_stats(total_messages=1)
        logger.info(f"–ö—É–ø–∏-—Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        return True
        
    except TelegramForbiddenError:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞
        db.mark_user_blocked(user_id, "Bot blocked by user")
        logger.debug(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞, –¥–æ–±–∞–≤–ª–µ–Ω –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫")
        db.update_daily_stats(blocked_users_count=1)
        return False
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫—É–ø–∏-—Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        db.log_traffic("kupi_error", user_id, "error", 0, video_path if 'video_path' in locals() else None, "error", str(e))
        return False

async def process_kupi_video_queue(bot: Bot):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—á–µ—Ä–µ–¥—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫—É–ø–∏-–≤–∏–¥–µ–æ
    
    Args:
        bot: —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ —Å–±—Ä–æ—Å–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–ª—è –Ω–æ–≤—ã—Ö –¥–∞—Ç
        reset_kupi_history_if_needed()
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–º –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫—É–ø–∏-–≤–∏–¥–µ–æ
        users_to_send = db.get_users_for_kupi_video()
        
        if not users_to_send:
            logger.debug("–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫—É–ø–∏-–≤–∏–¥–µ–æ")
            return
        
        logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –∫—É–ø–∏-–≤–∏–¥–µ–æ –¥–ª—è {len(users_to_send)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        
        success_count = 0
        error_count = 0
        
        for user_id in users_to_send:
            try:
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                if db.is_user_blocked(user_id):
                    logger.debug(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                    continue
                
                success = await send_kupi_video_to_user(bot, user_id)
                if success:
                    success_count += 1
                else:
                    error_count += 1
                
                # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
                await asyncio.sleep(1)
                
            except Exception as e:
                logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫—É–ø–∏-–≤–∏–¥–µ–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                error_count += 1
        
        if success_count > 0 or error_count > 0:
            logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∫—É–ø–∏-–≤–∏–¥–µ–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£—Å–ø–µ—à–Ω–æ: {success_count}, –û—à–∏–±–æ–∫: {error_count}")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–∏ –∫—É–ø–∏-–≤–∏–¥–µ–æ: {e}")

async def kupi_video_background_task(bot: Bot):
    """
    –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫—É–ø–∏-–≤–∏–¥–µ–æ
    –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç
    
    Args:
        bot: —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
    """
    logger.info("–ó–∞–ø—É—â–µ–Ω–∞ —Ñ–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –∫—É–ø–∏-–≤–∏–¥–µ–æ")
    
    while True:
        try:
            await process_kupi_video_queue(bot)
            
            # –ñ–¥–µ–º 10 –º–∏–Ω—É—Ç –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
            await asyncio.sleep(600)  # 10 –º–∏–Ω—É—Ç = 600 —Å–µ–∫—É–Ω–¥
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–µ –∫—É–ø–∏-–≤–∏–¥–µ–æ: {e}")
            # –ü—Ä–∏ –æ—à–∏–±–∫–µ –∂–¥–µ–º 5 –º–∏–Ω—É—Ç –∏ –ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞
            await asyncio.sleep(300)

async def test_send_kupi_video(bot: Bot, user_id: int):
    """
    –¢–µ—Å—Ç–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –∫—É–ø–∏-–≤–∏–¥–µ–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    
    Args:
        bot: —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    """
    logger.info(f"–¢–µ—Å—Ç–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –∫—É–ø–∏-–≤–∏–¥–µ–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç
    _, text_content = get_kupi_content()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç —Å –∫–Ω–æ–ø–∫–∞–º–∏ (–±–µ–∑ –≤–∏–¥–µ–æ –¥–ª—è —Ç–µ—Å—Ç–∞)
    try:
        await send_split_message(
            bot,
            text_content,
            user_id,
            reply_markup=get_kupi_video_menu()
        )
        logger.info(f"–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫—É–ø–∏-–≤–∏–¥–µ–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫—É–ø–∏-–≤–∏–¥–µ–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        return False