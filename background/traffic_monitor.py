#!/usr/bin/env python3
"""
–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ç—Ä–∞—Ñ–∏–∫–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏—è —Å—É—Ç–æ—á–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤
"""

import asyncio
import logging
from datetime import datetime, time, timedelta
from aiogram import Bot
from core.database import db
from core.config import ADMIN_IDS

logger = logging.getLogger(__name__)

async def send_daily_report(bot: Bot):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—É—Ç–æ—á–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ —Ç—Ä–∞—Ñ–∏–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
    """
    try:
        report = db.get_daily_report()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º
        admin_ids = [int(admin_id) for admin_id in ADMIN_IDS.split(',') if admin_id.strip()]
        
        for admin_id in admin_ids:
            try:
                await bot.send_message(admin_id, report)
                logger.info(f"–°—É—Ç–æ—á–Ω—ã–π –æ—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω—É {admin_id}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞ –∞–¥–º–∏–Ω—É {admin_id}: {e}")
                
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—É—Ç–æ—á–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {e}")

async def traffic_monitor_task(bot: Bot):
    """
    –û—Å–Ω–æ–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ç—Ä–∞—Ñ–∏–∫–∞
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—É—Ç–æ—á–Ω—ã–µ –æ—Ç—á–µ—Ç—ã –≤ 9:00 MSK –∫–∞–∂–¥—ã–π –¥–µ–Ω—å
    """
    logger.info("–ó–∞–ø—É—â–µ–Ω–∞ –∑–∞–¥–∞—á–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ç—Ä–∞—Ñ–∏–∫–∞")
    
    while True:
        try:
            # –ú–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è (UTC+3)
            current_time = datetime.now()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—É—Ç–æ—á–Ω—ã–π –æ—Ç—á–µ—Ç (–≤ 9:00)
            if current_time.hour == 9 and current_time.minute == 0:
                logger.info("–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—É—Ç–æ—á–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞")
                await send_daily_report(bot)
                
                # –ñ–¥–µ–º –º–∏–Ω—É—Ç—É, —á—Ç–æ–±—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –æ—Ç—á–µ—Ç –¥–≤–∞–∂–¥—ã
                await asyncio.sleep(60)
            
            # –ö–∞–∂–¥—ã–π —á–∞—Å –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            if current_time.minute == 0:
                try:
                    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
                    # (—ç—Ç–æ –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å, –¥–æ–±–∞–≤–∏–≤ —Ç–∞–±–ª–∏—Ü—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏)
                    logger.debug("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—á–∞—Å–æ–≤–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—á–∞—Å–æ–≤–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
            await asyncio.sleep(30)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ç—Ä–∞—Ñ–∏–∫–∞: {e}")
            await asyncio.sleep(60)

async def send_test_report(bot: Bot, admin_id: int):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    """
    try:
        report = db.get_daily_report()
        await bot.send_message(admin_id, f"üß™ –¢–ï–°–¢–û–í–´–ô –û–¢–ß–ï–¢:\n\n{report}")
        logger.info(f"–¢–µ—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω—É {admin_id}")
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {e}")
        return False