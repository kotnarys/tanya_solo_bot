from flask import Flask, request, jsonify
import requests
import logging
from datetime import datetime
from config import BOT_TOKEN, ADMIN_IDS
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = Flask(__name__)

# –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—é –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã
CUSTOMER_SUCCESS_MESSAGE = """üéâ <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è—é!</b>

‚ú® –£–∂–µ —Å <b>1 –∞–≤–≥—É—Å—Ç–∞</b> –æ—Ç–∫—Ä–æ—é—Ç—Å—è –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ò–ò –¢–∞—Ç—å—è–Ω—ã –°–æ–ª–æ

üí´ –í–∞—Å –∂–¥–µ—Ç –Ω–µ–≤–µ—Ä–æ—è—Ç–Ω–∞—è —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è!"""

# –¢–µ–∫—Å—Ç –ø—Ä–∏ –Ω–µ—É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ
CUSTOMER_FAILED_MESSAGE = """üòî <b>–û–π, –æ–ø–ª–∞—Ç–∞ –Ω–µ –ø—Ä–æ—à–ª–∞</b>

üí≥ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑

–ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Å–ª—É–∂–±—É –∑–∞–±–æ—Ç—ã @zabotasolo"""

def extract_user_id_from_payment_id(payment_id):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç user_id –∏–∑ –Ω–∞—à–µ–≥–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞"""
    try:
        if payment_id and payment_id.startswith("bot_"):
            parts = payment_id.split("_")
            if len(parts) >= 2:
                return int(parts[1])
    except (ValueError, IndexError):
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å user_id –∏–∑ payment_id: {payment_id}")
    return None

def send_telegram_message(user_id, message):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ Telegram Bot API (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)"""
    url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
    
    data = {
        "chat_id": user_id,
        "text": message,
        "parse_mode": "HTML"
    }
    
    try:
        response = requests.post(url, json=data, timeout=10)
        
        if response.status_code == 200:
            logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            return True
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {response.status_code} - {response.text}")
            return False
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        return False

def get_user_info(user_id):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
    url = f"https://api.telegram.org/bot{BOT_TOKEN}/getChat"
    
    data = {"chat_id": user_id}
    
    try:
        response = requests.post(url, json=data, timeout=5)
        
        if response.status_code == 200:
            result = response.json()
            user_data = result.get("result", {})
            username = user_data.get("username")
            first_name = user_data.get("first_name", "")
            last_name = user_data.get("last_name", "")
            
            if username:
                return f"@{username}"
            elif first_name or last_name:
                return f"{first_name} {last_name}".strip()
            else:
                return f"ID: {user_id}"
        else:
            return f"ID: {user_id}"
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ {user_id}: {e}")
        return f"ID: {user_id}"

def send_customer_success_message(user_id, tariff_name):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—é"""
    message = f"{CUSTOMER_SUCCESS_MESSAGE}\n\nüéØ <b>–í–∞—à —Ç–∞—Ä–∏—Ñ:</b> {tariff_name}"
    return send_telegram_message(user_id, message)

def send_customer_failed_message(user_id, tariff_name):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–µ—É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ"""
    return send_telegram_message(user_id, CUSTOMER_FAILED_MESSAGE)

def send_admin_notifications(user_id, tariff_name):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∞–¥–º–∏–Ω–∞–º"""
    try:
        logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∞–¥–º–∏–Ω–∞–º. ADMIN_IDS: {ADMIN_IDS}")
        
        if not ADMIN_IDS:
            logger.warning("ADMIN_IDS –ø—É—Å—Ç–æ–π!")
            return False
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user_info = get_user_info(user_id)
        
        notification = f"""üîî <b>–ù–û–í–ê–Ø –û–ü–õ–ê–¢–ê!</b>

üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {user_info}
üéØ <b>–¢–∞—Ä–∏—Ñ:</b> {tariff_name}
üÜî <b>Telegram ID:</b> {user_id}
üí≥ <b>–°—Ç–∞—Ç—É—Å:</b> –û–ø–ª–∞—á–µ–Ω–æ
üìÖ <b>–í—Ä–µ–º—è:</b> {datetime.now().strftime('%d.%m.%Y %H:%M')}"""
        
        sent_count = 0
        for admin_id in ADMIN_IDS:
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É {admin_id}")
            if send_telegram_message(admin_id, notification):
                sent_count += 1
        
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {sent_count} –∏–∑ {len(ADMIN_IDS)} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
        return sent_count > 0
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∞–¥–º–∏–Ω–∞–º: {e}")
        return False

@app.route('/webhook/getcourse', methods=['POST'])
def getcourse_webhook():
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ webhook –æ—Ç GetCourse"""
    try:
        data = request.get_json()
        logger.info(f"–ü–æ–ª—É—á–µ–Ω webhook –æ—Ç GetCourse: {data}")
        
        # –ò—â–µ–º –Ω–∞—à –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä
        payment_id = (
            data.get('user_comment') or 
            data.get('comment') or 
            data.get('custom_field') or
            data.get('utm_source')
        )
        
        user_id = extract_user_id_from_payment_id(payment_id)
        
        if user_id:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞
            tariff_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ"
            if payment_id:
                if "_basic_" in payment_id:
                    tariff_name = "¬´–î–ª—è —Å–µ–±—è¬ª"
                elif "_vip_" in payment_id:
                    tariff_name = "¬´–í–ò–ü –ñ–∏–∑–Ω—å¬ª"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
            status = data.get('status', '').lower()
            payment_status = data.get('payment_status', '').lower()
            
            is_success = (
                status in ['success', 'paid', 'completed'] or 
                payment_status in ['success', 'paid', 'completed']
            )
            
            is_failed = (
                status in ['failed', 'error', 'declined', 'cancelled'] or
                payment_status in ['failed', 'error', 'declined', 'cancelled']
            )
            
            if is_success:
                # –£—Å–ø–µ—à–Ω–∞—è –æ–ø–ª–∞—Ç–∞
                customer_sent = send_customer_success_message(user_id, tariff_name)
                admin_sent = send_admin_notifications(user_id, tariff_name)
                
                return jsonify({
                    "status": "success", 
                    "message": "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã",
                    "customer_notified": customer_sent,
                    "admins_notified": admin_sent
                })
                
            elif is_failed:
                # –ù–µ—É—Å–ø–µ—à–Ω–∞—è –æ–ø–ª–∞—Ç–∞
                customer_sent = send_customer_failed_message(user_id, tariff_name)
                
                return jsonify({
                    "status": "failed", 
                    "message": "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–µ—É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ",
                    "customer_notified": customer_sent
                })
            else:
                # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å
                logger.info(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞: {data.get('status')}")
                return jsonify({"status": "ignored", "message": "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞"})
        else:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å user_id –∏–∑ webhook: {data}")
            return jsonify({"status": "error", "message": "User ID –Ω–µ –Ω–∞–π–¥–µ–Ω"})
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook: {e}")
        return jsonify({"status": "error", "message": str(e)}), 500

@app.route('/health', methods=['GET'])
def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞"""
    return jsonify({"status": "ok", "message": "Webhook server is running"})

if __name__ == '__main__':
    logger.info("–ó–∞–ø—É—Å–∫ webhook —Å–µ—Ä–≤–µ—Ä–∞...")
    app.run(host='0.0.0.0', port=5000, debug=False)