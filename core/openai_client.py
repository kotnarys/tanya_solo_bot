import asyncio
from typing import Optional
import logging
from datetime import datetime

logger = logging.getLogger(__name__)

# OpenAI –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
OPENAI_API_KEY = "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"
ASSISTANT_ID = "asst_9sI7k0guXxzcJp2z4fcaiJfx"

# –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ OpenAI –¥–ª—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
OPENAI_ACCESS_START_DATE = datetime(2025, 7, 30, 15, 0, 0)  # 30 –∏—é–ª—è 2025 15:00 –ú–°–ö

# ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ (–æ–Ω–∏ –∏–º–µ—é—Ç –¥–æ—Å—Ç—É–ø –≤—Å–µ–≥–¥–∞) - –£–î–ê–õ–ï–ù–û, –∏—Å–ø–æ–ª—å–∑—É–µ–º PERMANENT_ACCESS_IDS –∏–∑ config
# ADMIN_IDS = [956895950, 530738541, 94398806]

class OpenAIClient:
    def __init__(self):
        self.client = None
        self.request_queue = asyncio.Queue(maxsize=10)  # –û—á–µ—Ä–µ–¥—å –∑–∞–ø—Ä–æ—Å–æ–≤
        self.processing = False
    
    def _get_client(self):
        """Lazy initialization OpenAI –∫–ª–∏–µ–Ω—Ç–∞"""
        if self.client is None:
            try:
                import openai
                self.client = openai.OpenAI(
                    api_key=OPENAI_API_KEY,
                    timeout=30.0
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ OpenAI –∫–ª–∏–µ–Ω—Ç–∞: {e}")
                return None
        return self.client
    
    def has_openai_access(self, user_id: int) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ—Å—Ç—É–ø –∫ OpenAI
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            bool: True –µ—Å–ª–∏ –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø
        """
        # –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã —Å –≤–µ—á–Ω—ã–º –¥–æ—Å—Ç—É–ø–æ–º –∏–º–µ—é—Ç –¥–æ—Å—Ç—É–ø –≤—Å–µ–≥–¥–∞
        from core.config import PERMANENT_ACCESS_IDS
        if user_id in PERMANENT_ACCESS_IDS:
            return True
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞—Ç—É - –¥–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ —Å 30 –∏—é–ª—è 15:00
        if datetime.now() < OPENAI_ACCESS_START_DATE:
            return False
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É
        from core.database import db
        return db.is_user_subscribed(user_id)
    
    async def create_thread(self, user_id: int) -> Optional[str]:
        """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π thread –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if not self.has_openai_access(user_id):
            return None
        
        client = self._get_client()
        if not client:
            return None
            
        try:
            thread = await asyncio.to_thread(client.beta.threads.create)
            logger.info(f"–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π thread {thread.id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            return thread.id
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è thread –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return None
    
    async def send_message(self, user_id: int, thread_id: str, message: str) -> Optional[str]:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ thread –∏ –ø–æ–ª—É—á–∞–µ—Ç –æ—Ç–≤–µ—Ç –æ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞"""
        if not self.has_openai_access(user_id):
            return None
        
        client = self._get_client()
        if not client:
            return None
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ —Å–±—Ä–æ—Å–∏—Ç—å thread (–µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π —Å–±—Ä–æ—Å –≤ 00:00 –ú–°–ö)
        from core.database import db
        thread_info = db.get_openai_thread(user_id)
        if thread_info and db.should_reset_thread_daily(user_id):
            logger.info(f"–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π —Å–±—Ä–æ—Å thread –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            await self._reset_user_thread(user_id)
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π thread
            new_thread_id = await self.create_thread(user_id)
            if new_thread_id:
                db.save_openai_thread(user_id, new_thread_id)
                thread_id = new_thread_id
            else:
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ã—á–Ω—É—é –æ—à–∏–±–∫—É –±–µ–∑ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å–±—Ä–æ—Å–∞
                return "üòî –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫... –ü–æ–ø—Ä–æ–±—É–π –Ω–∞–ø–∏—Å–∞—Ç—å –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç–∫—É üíï"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è rate limit
        await asyncio.sleep(2)
            
        try:
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö runs
            runs = await asyncio.to_thread(
                client.beta.threads.runs.list,
                thread_id=thread_id,
                limit=1
            )
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π run - –∂–¥–µ–º –µ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            if runs.data and runs.data[0].status in ['queued', 'in_progress', 'cancelling']:
                active_run = runs.data[0]
                logger.info(f"–ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ run –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                
                # –ñ–¥–µ–º –¥–æ 30 —Å–µ–∫—É–Ω–¥
                wait_time = 0
                while active_run.status in ['queued', 'in_progress', 'cancelling'] and wait_time < 30:
                    await asyncio.sleep(2)
                    wait_time += 2
                    active_run = await asyncio.to_thread(
                        client.beta.threads.runs.retrieve,
                        thread_id=thread_id,
                        run_id=active_run.id
                    )
                
                # –ï—Å–ª–∏ —Ç–∞–∫ –∏ –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è - –æ—Ç–º–µ–Ω—è–µ–º
                if active_run.status in ['queued', 'in_progress', 'cancelling']:
                    try:
                        await asyncio.to_thread(
                            client.beta.threads.runs.cancel,
                            thread_id=thread_id,
                            run_id=active_run.id
                        )
                        await asyncio.sleep(1)
                    except:
                        pass
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ thread
            await asyncio.to_thread(
                client.beta.threads.messages.create,
                thread_id=thread_id,
                role="user",
                content=message
            )
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
            run = await asyncio.to_thread(
                client.beta.threads.runs.create,
                thread_id=thread_id,
                assistant_id=ASSISTANT_ID
            )
            
            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å timeout
            wait_time = 0
            max_wait = 60  # –º–∞–∫—Å–∏–º—É–º 60 —Å–µ–∫—É–Ω–¥
            
            while run.status in ['queued', 'in_progress', 'cancelling'] and wait_time < max_wait:
                await asyncio.sleep(2)
                wait_time += 2
                run = await asyncio.to_thread(
                    client.beta.threads.runs.retrieve,
                    thread_id=thread_id,
                    run_id=run.id
                )
            
            if run.status == 'completed':
                # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
                messages = await asyncio.to_thread(
                    client.beta.threads.messages.list,  
                    thread_id=thread_id
                )
                
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
                for message in messages.data:
                    if message.role == 'assistant':
                        response_text = message.content[0].text.value
                        return response_text
                
                logger.error(f"‚ùå No assistant message found for user {user_id}")
            
            # –ï—Å–ª–∏ timeout - –æ—Ç–º–µ–Ω—è–µ–º run
            if wait_time >= max_wait:
                try:
                    await asyncio.to_thread(
                        client.beta.threads.runs.cancel,
                        thread_id=thread_id,
                        run_id=run.id
                    )
                except:
                    pass
                logger.error(f"Timeout –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                return "üïê –ò–∑–≤–∏–Ω–∏, –º–∏–ª–∞—è, –∑–∞–ø—Ä–æ—Å –∑–∞–Ω—è–ª —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ —Å –±–æ–ª–µ–µ –ø—Ä–æ—Å—Ç—ã–º –≤–æ–ø—Ä–æ—Å–æ–º ‚ú®"
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ failed —Å—Ç–∞—Ç—É—Å–∞
            if run.status == 'failed':
                if hasattr(run, 'last_error') and run.last_error:
                    error_message = str(run.last_error)
                    logger.error(f"Failed run –¥–ª—è {user_id}: {error_message}")
                    
                    # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ rate limit –≤ failed run
                    if "Request too large" in error_message or "input or output tokens must be reduced" in error_message:
                        logger.info(f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–±—Ä–æ—Å thread –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∏–∑-–∑–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ rate limit –≤ failed run. –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: '{message[:200]}...' (–¥–ª–∏–Ω–∞: {len(message)} —Å–∏–º–≤–æ–ª–æ–≤)")
                        await self._reset_user_thread(user_id)
                        
                        # –î–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–ª–∏–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏—è
                        if len(message) > 1000:
                            return "üîÑ –ò–∑–≤–∏–Ω–∏, –º–∏–ª–∞—è, —Ç–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏. –ü–æ–ø—Ä–æ–±—É–π —Ä–∞–∑–¥–µ–ª–∏—Ç—å –µ–≥–æ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–æ—Ä–æ—Ç–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ - —Ç–∞–∫ —è —Å–º–æ–≥—É –ª—É—á—à–µ —Ç–µ–±–µ –ø–æ–º–æ—á—å! ‚ú®"
                        else:
                            return "üòî –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫... –ü–æ–ø—Ä–æ–±—É–π –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –Ω–∞–ø–∏—Å–∞—Ç—å –µ—â–µ —Ä–∞–∑ üíï"
                    
                    # –û–±—ã—á–Ω—ã–π rate limit –≤ failed run
                    if "rate_limit" in error_message.lower():
                        return "üïê –ò–∑–≤–∏–Ω–∏, –º–∏–ª–∞—è, —Å–µ–π—á–∞—Å –æ—á–µ–Ω—å –º–Ω–æ–≥–æ –ª—é–¥–µ–π –ø–∏—à—É—Ç –º–Ω–µ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ! –ü–æ–ø—Ä–æ–±—É–π –Ω–∞–ø–∏—Å–∞—Ç—å —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç–∫—É ‚Äî —è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–≤–µ—á—É ‚ú®"
                    else:
                        return "üòî –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–≤–æ–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –Ω–∞–ø–∏—Å–∞—Ç—å –µ—â–µ —Ä–∞–∑ üíï"
                else:
                    return "üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –Ω–∞–ø–∏—Å–∞—Ç—å –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç–∫—É üíï"
            
            logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: —Å—Ç–∞—Ç—É—Å {run.status}")
            
            # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏ run –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏  
            if hasattr(run, 'last_error') and run.last_error:
                logger.error(f"–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏ –¥–ª—è {user_id}: {run.last_error}")
            
            return None
            
        except Exception as e:
            # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ concurrent runs
            if "while a run" in str(e) and "is active" in str(e):
                logger.warning(f"Concurrent run –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, –ø–æ–≤—Ç–æ—Ä–∏–º —á–µ—Ä–µ–∑ 3 —Å–µ–∫")
                await asyncio.sleep(3)
                # –û–¥–∏–Ω –ø–æ–≤—Ç–æ—Ä
                return await self.send_message(user_id, thread_id, message)
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ rate limit exceeded
            if "rate_limit_exceeded" in str(e) or "Rate limit reached" in str(e):
                logger.warning(f"Rate limit exceeded –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                
                # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º thread –µ—Å–ª–∏ rate limit –∫—Ä–∏—Ç–∏—á–Ω—ã–π
                if "Request too large" in str(e) or "input or output tokens must be reduced" in str(e):
                    logger.info(f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–±—Ä–æ—Å thread –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∏–∑-–∑–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ rate limit. –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: '{message[:200]}...' (–¥–ª–∏–Ω–∞: {len(message)} —Å–∏–º–≤–æ–ª–æ–≤)")
                    await self._reset_user_thread(user_id)
                    
                    # –î–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–ª–∏–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏—è
                    if len(message) > 1000:
                        return "üîÑ –ò–∑–≤–∏–Ω–∏, –º–∏–ª–∞—è, —Ç–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏. –ü–æ–ø—Ä–æ–±—É–π —Ä–∞–∑–¥–µ–ª–∏—Ç—å –µ–≥–æ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–æ—Ä–æ—Ç–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ - —Ç–∞–∫ —è —Å–º–æ–≥—É –ª—É—á—à–µ —Ç–µ–±–µ –ø–æ–º–æ—á—å! ‚ú®"
                    else:
                        return "üòî –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫... –ü–æ–ø—Ä–æ–±—É–π –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –Ω–∞–ø–∏—Å–∞—Ç—å –µ—â–µ —Ä–∞–∑ üíï"
                
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ rate limit
                return "üïê –ò–∑–≤–∏–Ω–∏, –º–∏–ª–∞—è, —Å–µ–π—á–∞—Å –æ—á–µ–Ω—å –º–Ω–æ–≥–æ –ª—é–¥–µ–π –ø–∏—à—É—Ç –º–Ω–µ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ! –ü–æ–ø—Ä–æ–±—É–π –Ω–∞–ø–∏—Å–∞—Ç—å —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç–∫—É ‚Äî —è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–≤–µ—á—É ‚ú®"
            
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return None
    
    async def _reset_user_thread(self, user_id: int):
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç OpenAI thread –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            from core.database import db
            db.delete_openai_thread(user_id)
            logger.info(f"Thread —Å–±—Ä–æ—à–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ thread –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
    
    
    async def transcribe_audio(self, user_id: int, audio_file_path: str) -> Optional[str]:
        """
        –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ—Ç –∞—É–¥–∏–æ —Ñ–∞–π–ª –≤ —Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ OpenAI Whisper
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            audio_file_path: –ø—É—Ç—å –∫ –∞—É–¥–∏–æ —Ñ–∞–π–ª—É
            
        Returns:
            str: —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        if not self.has_openai_access(user_id):
            return None
        
        client = self._get_client()
        if not client:
            return None
            
        try:
            with open(audio_file_path, "rb") as audio_file:
                transcript = await asyncio.to_thread(
                    client.audio.transcriptions.create,
                    model="whisper-1",
                    file=audio_file,
                    language="ru"  # –£–∫–∞–∑—ã–≤–∞–µ–º —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫ –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
                )
            
            transcribed_text = transcript.text
            logger.info(f"–ê—É–¥–∏–æ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
            return transcribed_text
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ –∞—É–¥–∏–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return None

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä OpenAI –∫–ª–∏–µ–Ω—Ç–∞
openai_client = OpenAIClient()